openapi: 3.1.0
info:
  title: 'Bar Assistant API'
  description: "**Bar Assistant** is all-in-one solution for managing your home bar. Compared to other recipe management software that usually tries to be more for general use, Bar Assistant is made specifically for managing cocktail recipes. This means that there are a lot of cocktail-oriented features, like ingredient substitutes, first-class ingredients, ABV calculations, unit switching and more.\n\n[Homepage](https://barassistant.app/) &middot; [Official Documentation](https://bar-assistant.github.io/docs/) &middot; [GitHub Repository](https://github.com/karlomikus/bar-assistant)\n\n## Authentication\n\nTo use the API, you need to generate a token. If you have an account you can use the login endpoint to get a token, or if you have a personal access token you can use it directly. Keep in mind personal access tokens can be limited to certain scopes. Tokens generated via login endpoint expire after 14 days.\n\nTreat your token like a password and don't share it with anyone.\n\nInclude your login token in the header of every request, using the following format: `Authorization: Bearer 1|dvWHLWuZbmWWFbjaUDla393Q9jK5Ou9ujWYPcvII`.\n\nA `401 Unauthorized` status code will be returned if you attempt to access a resource without token.\n\n## Rate Limiting\n\nThe rate limit is set to 1,000 requests per minute per IP address, or per user ID if authenticated. Certain endpoints have specific rate limits, such as importing and exporting data. Exporting is limited to 1 request per minute, while importing is restricted to 2 requests per minute for users without a subscription (applicable to cloud-hosted instances).\n\n## Content-Type\n\nEnsure that requests include the `Accept: application/json` header.\n\n## Bar context\n\nFor requests that require a reference to a specific bar, use `Bar-Assistant-Bar-Id` header with the value set to bar id in your request.\n\n## Authorization\n\nA `403 Forbidden` status code will be returned if you attempt to access a resource without the necessary permissions.\n\n## Sorting\n\nCertain endpoints support sorting by specific attributes. Prepend `-` to an attribute for descending order, or omit it for ascending order. For example, `?sort=name` sorts by the `name` attribute in ascending order. Multiple sorts can be applied by separating attributes with a comma.\n\n## Includes\n\nSome endpoints support the inclusion of related data on demand. To include multiple relationships, separate them with a comma. For example, `?include=notes,user` will include additional data for both notes and the user.\n\n## Pagination\n\nTo paginate results, use the `?per_page=30` parameter to limit the number of results per request. To navigate to a specific page, use `?page=3`.\n\n## Filtering\n\nCertain endpoints allow filtering by specific attributes. For example, `?filter[attribute_name]=value` filters results based on the given attribute. Multiple filter values can be separated by commas, e.g., `?filter[attribute_name]=value1,value2`."
  contact:
    name: 'Bar Assistant'
    url: 'https://barassistant.app'
    email: info@barassistant.app
  license:
    name: MIT
    url: 'https://github.com/karlomikus/bar-assistant/blob/master/LICENSE'
  version: '{{VERSION}}'
servers:
  -
    url: 'http://localhost:8000/api'
    description: 'Local docker development'
  -
    url: 'https://api.barassistant.app/api'
    description: Production
paths:
  /auth/login:
    post:
      tags:
        - Authentication
      summary: 'Authenticate user'
      description: 'Authenticate user and get auth token'
      operationId: authenticate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Token' }
                type: object
        '400':
          description: 'Unable to authenticate. Possible reasons: invalid credentials, unconfirmed account or disabled password login'
      security: []
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      description: 'Logout currently authenticated user'
      operationId: logout
      responses:
        '204':
          description: 'Successful response'
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register
      description: 'Register a new user'
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: 'Request password reset'
      description: 'Request a new password reset link'
      operationId: passwordForgot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: admin@example.com
              type: object
      responses:
        '204':
          description: 'Password reset link sent'
        '400':
          description: 'Unable to send password reset link'
      security: []
  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: 'Reset password'
      description: 'Reset user password'
      operationId: passwordReset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                token:
                  type: string
                  example: token-from-email
                email:
                  type: string
                  example: admin@example.com
                password:
                  type: string
                  minLength: 5
                  example: password
                password_confirmation:
                  type: string
                  minLength: 5
                  example: password
              type: object
      responses:
        '204':
          description: 'Password succssfully reset'
        '400':
          description: 'Unable to reset password'
      security: []
  '/auth/verify/{id}/{hash}':
    get:
      tags:
        - Authentication
      summary: 'Confirm account'
      description: 'Confirm user account, if applicable'
      operationId: confirmAccount
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a user'
          required: true
          schema:
            type: integer
        -
          name: hash
          in: path
          description: 'Hash string sent to user email'
          required: true
          schema:
            type: string
      responses:
        '204':
          description: 'Account confirmed'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  /bars:
    get:
      tags:
        - Bars
      summary: 'List bars'
      description: 'Show a list of bars user has access to. Includes bars that user has made and bars he is a member of.'
      operationId: listBars
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Bar' } }
                type: object
    post:
      tags:
        - Bars
      summary: 'Create bar'
      description: 'Create a new bar'
      operationId: saveBar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '422':
          description: 'Request validation failed.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  '/bars/{id}':
    get:
      tags:
        - Bars
      summary: 'Show bar'
      description: 'Show information about a specific bar'
      operationId: showBar
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Bars
      summary: 'Update bar'
      description: 'Update a specific bar'
      operationId: updateBar
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BarRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '422':
          description: 'Request validation failed.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Bars
      summary: 'Delete bar'
      description: 'Delete a specific bar'
      operationId: deleteBar
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /bars/join:
    post:
      tags:
        - Bars
      summary: 'Join a bar'
      description: 'Join a bar via invite code'
      operationId: joinBar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                invite_code:
                  type: string
                  example: 01H8S3VH2HTEB3D893AW8NTBBC
              type: object
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Bar' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/memberships':
    get:
      tags:
        - Bars
      summary: 'List members'
      description: 'List all bar members'
      operationId: listBarMembership
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/BarMembership' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Bars
      summary: 'Leave a bar'
      description: "Deletes a user's membership to a bar"
      operationId: leaveBar
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/memberships/{userId}':
    delete:
      tags:
        - Bars
      summary: 'Remove member'
      description: "Removes a specific user's membership from a bar"
      operationId: removeBarMembership
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: userId
          in: path
          description: 'Database id of a user'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/transfer':
    post:
      tags:
        - Bars
      summary: 'Transfer ownership'
      description: 'Transfer a bar to another user.'
      operationId: transferBarOwnership
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                user_id:
                  description: 'Database id of a user you want to transfer ownership to'
                  type: integer
                  example: 1
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/status':
    post:
      tags:
        - Bars
      summary: 'Update status'
      description: 'Update current status of a bar'
      operationId: toggleBarStatus
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                status:
                  $ref: '#/components/schemas/BarStatusEnum'
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/optimize':
    post:
      tags:
        - Bars
      summary: 'Optimize bar'
      description: 'Triggers bar optimizations. Updates all cocktail ABVs, rebuilds ingredient hierarchy, updates search index. Limited call to once per minute.'
      operationId: optimizeBar
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '429':
          description: 'Reached rate limit.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/sync-datapack':
    post:
      tags:
        - Bars
      summary: 'Sync recipes'
      description: 'Triggers synchronization of recipes from the default datapack. Matches data by name, does not overwrite your existing recipes or ingredients.'
      operationId: syncBarDatapack
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '429':
          description: 'Reached rate limit.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /calculators:
    get:
      tags:
        - Calculator
      summary: 'List calculators'
      description: 'Show a list of all calculators in a bar'
      operationId: listCalculators
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Calculator' } }
                type: object
    post:
      tags:
        - Calculator
      summary: 'Create calculator'
      description: 'Create a new calculator'
      operationId: saveCalculator
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculatorRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Calculator' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/calculators/{id}':
    get:
      tags:
        - Calculator
      summary: 'Show calculator'
      description: 'Show a specific calculator'
      operationId: showCalculator
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Calculator' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Calculator
      summary: 'Update calculator'
      description: 'Update a specific calculator'
      operationId: updateCalculator
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculatorRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Calculator' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Calculator
      summary: 'Delete calculator'
      description: 'Delete a specific calculator'
      operationId: deleteCalculator
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/calculators/{id}/solve':
    post:
      tags:
        - Calculator
      summary: 'Solve calculator'
      description: 'Solve calculator expressions. Takes a JSON body with the calculator input variables names as keys and their values as values and solves the defined evaluations. Results are objects with evaluation variable names as keys and solved expression result as values.'
      operationId: solveCalculator
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalculatorSolveRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CalculatorResult' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /cocktails:
    get:
      tags:
        - Cocktails
      summary: 'List cocktails'
      description: 'Show a list of all cocktails in a bar'
      operationId: listCocktails
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
        -
          name: filter
          in: query
          description: 'Filter by attributes. You can specify multiple matching filter values by passing a comma separated list of values.'
          style: deepObject
          explode: true
          schema:
            properties:
              id:
                description: 'Filter by cocktail ID(s)'
                type: string
              name:
                description: 'Filter by cocktail names(s) (fuzzy search)'
                type: string
              ingredient_name:
                description: 'Filter by cocktail ingredient names(s) (fuzzy search)'
                type: string
              tag_id:
                description: 'Filter by tag ID(s)'
                type: string
              created_user_id:
                description: 'Filter by creator ID(s)'
                type: string
              glass_id:
                description: 'Filter by glass ID(s)'
                type: string
              cocktail_method_id:
                description: 'Filter by cocktail method ID(s)'
                type: string
              collection_id:
                description: 'Filter by collection ID(s)'
                type: string
              favorites:
                description: 'Show only user favorites'
                type: boolean
              on_shelf:
                description: "Show only cocktails on the user's shelf"
                type: boolean
              bar_shelf:
                description: 'Show only cocktails on the bar shelf'
                type: boolean
              user_shelves:
                description: "Show only cocktails on the user's shelves. Comma separated list of user IDs"
                type: string
              shelf_ingredients:
                description: 'Show only cocktails that can be made with the given ingredients. Used as on-the-fly custom shelf filter'
                type: string
              is_public:
                description: 'Show only cocktails with public links'
                type: boolean
              user_rating_min:
                description: 'Filter by greater than or equal user rating'
                type: number
              user_rating_max:
                description: 'Filter by less than or equal user rating'
                type: number
              average_rating_min:
                description: 'Filter by greater than or equal average rating'
                type: number
              average_rating_max:
                description: 'Filter by less than or equal average rating'
                type: number
              abv_min:
                description: 'Filter by greater than or equal ABV'
                type: number
              abv_max:
                description: 'Filter by less than or equal ABV'
                type: number
              main_ingredient_id:
                description: 'Show only cocktails whose main ingredient is in the given list. Comma separated list of ingredient IDs'
                type: string
              total_ingredients:
                description: 'Filter by total number of ingredients'
                type: number
              missing_ingredients:
                description: 'Filter by total number of missing ingredients'
                type: number
              missing_bar_ingredients:
                description: 'Filter by total number of missing bar ingredients'
                type: number
              specific_ingredients:
                description: 'Show cocktails that contain given ingredient ID(s)'
                type: string
              ignore_ingredients:
                description: 'Show cocktails that do not contain given ingredient ID(s)'
                type: string
            type: object
        -
          name: sort
          in: query
          description: 'Sort by attributes. Available attributes: `name`, `created_at`, `average_rating`, `user_rating`, `abv`, `total_ingredients`, `missing_ingredients`, `missing_bar_ingredients`, `favorited_at`, `random`.'
          schema:
            type: string
        -
          name: include
          in: query
          description: 'Include additional relationships. Available relations: `glass`, `method`, `user`, `navigation`, `utensils`, `createdUser`, `updatedUser`, `images`, `tags`, `ingredients.ingredient`, `ratings`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/Cocktail' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Cocktails
      summary: 'Create cocktail'
      description: 'Create a new cocktail'
      operationId: saveCocktail
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '422':
          description: 'Request validation failed.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
  '/cocktails/{id}':
    get:
      tags:
        - Cocktails
      summary: 'Show cocktail'
      description: 'Show details of a specific cocktail'
      operationId: showCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Cocktails
      summary: 'Update cocktail'
      description: 'Update a specific cocktail'
      operationId: updateCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '422':
          description: 'Request validation failed.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
    delete:
      tags:
        - Cocktails
      summary: 'Delete cocktail'
      description: 'Delete a specific cocktail'
      operationId: deleteCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/toggle-favorite':
    post:
      tags:
        - Cocktails
      summary: 'Toggle favorite'
      description: 'Marks cocktail as users favorite. Can be called again to remove the favorite.'
      operationId: toggleCocktailFavorite
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { properties: { id: { type: integer, example: 1 }, is_favorited: { type: boolean, example: true } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/public-link':
    post:
      tags:
        - Cocktails
      summary: 'Create a public ID'
      description: 'Create a public link that can be shared'
      operationId: createCocktailPublicLink
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Cocktails
      summary: 'Delete public link'
      description: 'Delete a cocktail public link'
      operationId: deleteCocktailPublicLink
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/share':
    get:
      tags:
        - Cocktails
      summary: 'Share cocktail'
      description: 'Get cocktail details in a specific shareable format'
      operationId: shareCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: string
        -
          name: type
          in: query
          description: 'Share format'
          schema:
            type: string
            enum:
              - json
              - json-ld
              - yaml
              - yml
              - xml
              - text
              - markdown
              - md
        -
          name: units
          in: query
          description: 'Units of measurement'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { required: [type, content], properties: { type: { type: string, example: json }, content: { type: string, example: '<content in requested format>' } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/similar':
    get:
      tags:
        - Cocktails
      summary: 'Show similar cocktails'
      description: 'Shows similar cocktails to the given cocktail. Prefers cocktails with same base ingredient.'
      operationId: showSimilarCocktails
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Cocktail' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/copy':
    post:
      tags:
        - Cocktails
      summary: 'Copy cocktail'
      description: 'Create a copy of a cocktail'
      operationId: copyCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: string
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktails/{id}/prices':
    get:
      tags:
        - Cocktails
      summary: 'Show cocktail prices'
      description: "Show calculated prices categorized by bar price categories. Prices are calculated using ingredient prices. If price category is missing, the ingredients don't have a price in that category. If there are multiple prices in category, the minimum price is used. Keep in mind that the price is just an estimate and might not be accurate."
      operationId: getCocktailPrices
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailPrice' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /cocktail-methods:
    get:
      tags:
        - 'Cocktail method'
      summary: 'List methods'
      description: 'Show a list of all cocktail methods in a bar'
      operationId: listCocktailMethods
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
        -
          name: filter
          in: query
          description: 'Filter by attributes'
          style: deepObject
          explode: true
          schema:
            properties:
              name:
                type: string
            type: object
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailMethod' } }
                type: object
    post:
      tags:
        - 'Cocktail method'
      summary: 'Create method'
      description: 'Create a new cocktail method'
      operationId: saveCocktailMethod
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailMethodRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CocktailMethod' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/cocktail-methods/{id}':
    get:
      tags:
        - 'Cocktail method'
      summary: 'Show method'
      description: 'Show a specific cocktail method'
      operationId: showCocktailMethod
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CocktailMethod' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - 'Cocktail method'
      summary: 'Update method'
      description: 'Update a specific cocktail method'
      operationId: updateCocktailMethod
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CocktailMethodRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CocktailMethod' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - 'Cocktail method'
      summary: 'Delete method'
      description: 'Delete a specific cocktail method'
      operationId: deleteCocktailMethod
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /collections:
    get:
      tags:
        - Collections
      summary: 'List collections'
      description: 'Show a list of all user collections in a specific bar'
      operationId: listCollections
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
        -
          name: filter
          in: query
          description: 'Filter by attributes'
          style: deepObject
          explode: true
          schema:
            properties:
              id:
                type: integer
              name:
                type: string
              cocktail_id:
                type: string
            type: object
        -
          name: include
          in: query
          description: 'Include additional relationships. Available relations: `cocktails`.'
          schema:
            type: string
        -
          name: sort
          in: query
          description: 'Sort by attributes. Available attributes: `name`, `created_at`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Collection' } }
                type: object
    post:
      tags:
        - Collections
      summary: 'Create collection'
      description: 'Create a new collection'
      operationId: saveCollection
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Collection' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/collections':
    get:
      tags:
        - Collections
      summary: 'List shared collections'
      description: 'Show a list of all collections that users shared with the bar'
      operationId: listSharedCollections
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Collection' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/collections/{id}':
    get:
      tags:
        - Collections
      summary: 'Show collection'
      description: 'Show a specific collection'
      operationId: showCollection
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Collection' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Collections
      summary: 'Update collection'
      description: 'Update a specific collection'
      operationId: updateCollection
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Collection' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Collections
      summary: 'Delete collection'
      description: 'Delete a specific collection'
      operationId: deleteCollection
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/collections/{id}/cocktails':
    put:
      tags:
        - Collections
      summary: 'Sync cocktails in a collection'
      description: 'Used to updated/add/delete cocktails in a collection. To delete all cocktails pass an empty array.'
      operationId: syncCocktailsInCollection
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                cocktails:
                  type: array
                  items: { type: integer }
              type: object
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Collection' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/explore/cocktails/{public_id}':
    get:
      tags:
        - Explore
      summary: 'Show cocktail'
      description: 'Show details from a cocktail using a public id'
      operationId: showPublicCocktail
      parameters:
        -
          name: public_id
          in: path
          description: 'Public cocktail id'
          required: true
          schema:
            type: string
            format: ulid
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/CocktailExplore' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  /exports:
    get:
      tags:
        - Exports
      summary: 'List exports'
      description: 'Show a list of all generated exports in a bar'
      operationId: listExports
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Export' } }
                type: object
    post:
      tags:
        - Exports
      summary: 'Create export'
      description: 'Start a new export process'
      operationId: saveExport
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Export' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '429':
          description: 'Reached rate limit.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
  '/exports/{id}':
    delete:
      tags:
        - Exports
      summary: 'Delete export'
      description: 'Delete a specific export'
      operationId: deleteExport
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/exports/{id}/download':
    get:
      tags:
        - Exports
      summary: 'Download export'
      description: 'Download a specific export'
      operationId: downloadExport
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: t
          in: query
          description: Token
          required: true
          schema:
            type: string
        -
          name: e
          in: query
          description: Timestamp
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/octet-stream:
              example: binary
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
    post:
      tags:
        - Exports
      summary: 'Generate link'
      description: 'Generates a publicly accessible download link for the export. The link will be valid for 1 minute by default.'
      operationId: generateExportDownloadLink
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/FileDownloadLink' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /feeds:
    get:
      tags:
        - Feeds
      summary: 'List feeds'
      description: 'Show a list of news and recipes from RSS/Atom feeds'
      operationId: listFeeds
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/FeedsRecipe' } }
                type: object
  /glasses:
    get:
      tags:
        - Glasses
      summary: 'List glassware'
      description: 'Show a list of all glassware in the bar'
      operationId: listGlassware
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
        -
          name: filter
          in: query
          description: 'Filter by attributes'
          style: deepObject
          explode: true
          schema:
            properties:
              name:
                type: string
            type: object
        -
          name: sort
          in: query
          description: 'Sort by attributes. Available attributes: `name`, `created_at`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Glass' } }
                type: object
    post:
      tags:
        - Glasses
      summary: 'Create glassware'
      description: 'Create a new glassware'
      operationId: saveGlassware
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlassRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Glass' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/glasses/{id}':
    get:
      tags:
        - Glasses
      summary: 'Show glassware'
      description: 'Show a specific glassware'
      operationId: showGlassware
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Glass' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Glasses
      summary: 'Update glassware'
      description: 'Update a specific glassware'
      operationId: updateGlassware
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GlassRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Glass' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Glasses
      summary: 'Delete glassware'
      description: 'Delete a specific glassware'
      operationId: deleteGlassware
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /images:
    get:
      tags:
        - Images
      summary: 'List images'
      description: 'List all images uploaded by the authenticated user'
      operationId: listImages
      parameters:
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/Image' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Images
      summary: 'Upload image'
      description: 'Used to upload multiple images at once. Uploaded images via this endpoint will not be attached to any resource. Images are converted to WebP format with 85% quality of the original image.'
      operationId: uploadImage
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              required:
                - images
              properties:
                images:
                  type: array
                  items: { $ref: '#/components/schemas/ImageRequest' }
              type: object
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Image' } }
                type: object
  '/images/{id}':
    get:
      tags:
        - Images
      summary: 'Show image'
      description: 'Show a single image'
      operationId: showImage
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Image' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Images
      summary: 'Update image'
      description: 'Update a specific image'
      operationId: updateImage
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ImageRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Image' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Images
      summary: 'Delete image'
      description: 'Delete a specific image'
      operationId: deleteImage
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/images/{id}/thumb':
    get:
      tags:
        - Images
      summary: 'Get thumbnail'
      description: 'Generate a thumbnail of a specific image'
      operationId: getImageThumbnail
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            image/jpg:
              schema:
                type: string
                format: binary
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  /import/cocktail:
    post:
      tags:
        - Import
      summary: 'Import recipe'
      description: 'Import a recipe from a JSON structure that follows Bar Assistant recipe JSON schema. Supported schemas include [Draft 2](https://barassistant.app/cocktail-02.schema.json) and [Draft 1](https://barassistant.app/cocktail-01.schema.json).'
      operationId: importCocktail
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                source:
                  description: 'Valid JSON structure to import.'
                  type: string
                duplicate_actions:
                  $ref: '#/components/schemas/DuplicateActionsEnum'
                  description: 'How to handle duplicates. Cocktails are matched by lowercase name.'
              type: object
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Cocktail' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '429':
          description: 'Reached rate limit.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
  /import/scrape:
    post:
      tags:
        - Import
      summary: 'Scrape recipe'
      description: 'Try to scrape a recipe from a website. Most of the well known recipe websites should work. Data returned is a valid JSON schema that you can import using import cocktail endpoint.'
      operationId: scrapeRecipe
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - source
              properties:
                source:
                  type: string
                  example: 'https://www.example.com/recipe-url'
                html_content:
                  type: [string, 'null']
                  example: '<p>HTML content</p>'
              type: object
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { required: [schema_version, schema, scraper_meta], properties: { schema_version: { type: string, example: draft2 }, schema: { $ref: 'https://barassistant.app/cocktail-02.schema.json' }, scraper_meta: { type: array, items: { required: [_id, source], properties: { _id: { type: string }, source: { type: string }, html_content: { description: 'The HTML content of the scraped page, if available.', type: [string, 'null'] } }, type: object } } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /import/ingredients:
    post:
      tags:
        - Import
      summary: 'Import ingredients'
      description: 'Import ingredients from a CSV source'
      operationId: importIngredients
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          text/csv: {  }
          multipart/form-data:
            schema:
              required:
                - source
              properties:
                source:
                  description: 'CSV file'
                  type: string
                  format: binary
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /ingredients:
    get:
      tags:
        - Ingredients
      summary: 'List ingredients'
      description: 'Show a list of all ingredients in a bar'
      operationId: listIngredients
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
        -
          name: filter
          in: query
          description: 'Filter by attributes. You can specify multiple matching filter values by passing a comma separated list of values.'
          style: deepObject
          explode: true
          schema:
            properties:
              id:
                description: 'Filter by ingredient id(s)'
                type: string
              name:
                description: 'Filter by ingredient name(s) (fuzzy search)'
                type: string
              name_exact:
                description: 'Filter by ingredient name(s) (exact match)'
                type: string
              origin:
                description: 'Filter by ingredient origin'
                type: string
              created_user_id:
                description: 'Filter by user(s) who created the ingredient'
                type: string
              on_shopping_list:
                description: 'Show only ingredients that are on the shopping list'
                type: boolean
              on_shelf:
                description: 'Show only ingredients that are on the shelf'
                type: boolean
              bar_shelf:
                description: 'Show only ingredients that are on the bar shelf'
                type: boolean
              strength_min:
                description: 'Show only ingredients with strength greater than or equal to given value'
                type: number
                format: float
              strength_max:
                description: 'Show only ingredients with strength less than or equal to given value'
                type: number
                format: float
              main_ingredients:
                description: 'Show only ingredients that are used as main ingredients in cocktails'
                type: boolean
              complex:
                description: 'Show only ingredients that can be made with other ingredients'
                type: boolean
              parent_ingredient_id:
                description: 'Show only direct children of given ingredient. Use null as value to get ingredients without parent ingredient'
                type: string
              descendants_of:
                description: 'Show all descendants of given ingredient(s)'
                type: string
            type: object
        -
          name: sort
          in: query
          description: 'Sort by attributes. Available attributes: `name`, `created_at`, `strength`, `total_cocktails`.'
          schema:
            type: string
        -
          name: include
          in: query
          description: 'Include additional relationships. Available relations: `parentIngredient`, `varieties`, `prices`, `ingredientParts`, `descendants`, `ancestors`, `images`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/Ingredient' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Ingredients
      summary: 'Create ingredient'
      description: 'Create a new ingredient'
      operationId: saveIngredient
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Ingredient' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/ingredients/{id}':
    get:
      tags:
        - Ingredients
      summary: 'Show ingredient'
      description: 'Show a specific ingredient'
      operationId: showIngredient
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Ingredient' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Ingredients
      summary: 'Update ingredient'
      description: 'Update a specific ingredient'
      operationId: updateIngredient
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IngredientRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Ingredient' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Ingredients
      summary: 'Delete ingredient'
      description: 'Delete a specific ingredient'
      operationId: deleteIngredient
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/ingredients/{id}/extra':
    get:
      tags:
        - Ingredients
      summary: 'Extra cocktails'
      description: 'Show a list of extra cocktails you can make if you add given ingredient to your shelf'
      operationId: extraIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailBasic' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/ingredients/{id}/cocktails':
    get:
      tags:
        - Ingredients
      summary: 'List cocktails'
      description: 'List all cocktails that use this ingredient'
      operationId: ingredientCocktails
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/CocktailBasic' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/ingredients/{id}/substitutes':
    get:
      tags:
        - Ingredients
      summary: 'List ingredient substitutes'
      description: 'Show a list of ingredients that are used as a substitute for this ingredient in cocktail recipes.'
      operationId: ingredientSubstitutes
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/IngredientBasic' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/ingredients/{id}/tree':
    get:
      tags:
        - Ingredients
      summary: 'Show tree'
      description: 'Show a ingredient hierarchy as a tree'
      operationId: showIngredientTree
      parameters:
        -
          name: id
          in: path
          description: 'Database id or slug of a resource'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/IngredientTree' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /menu:
    get:
      tags:
        - Menu
      summary: 'Show menu'
      description: 'Show a bar menu'
      operationId: showMenu
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Menu' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Menu
      summary: 'Update menu'
      description: 'Update bar menu'
      operationId: updateMenu
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MenuRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Menu' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/explore/menus/{slug}':
    get:
      tags:
        - Explore
      summary: 'Show public menu'
      description: 'Show a public bar menu details'
      operationId: publicMenu
      parameters:
        -
          name: slug
          in: path
          description: 'Bar database slug'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/MenuPublic' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  /menu/export:
    get:
      tags:
        - Menu
      summary: 'Export menu'
      description: 'Export menu as CSV'
      operationId: exportMenu
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            text/csv:
              schema:
                type: string
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /notes:
    get:
      tags:
        - Notes
      summary: 'List notes'
      description: 'Show list of all user notes'
      operationId: listNotes
      parameters:
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/Note' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
    post:
      tags:
        - Notes
      summary: 'Create note'
      description: 'Create a new note'
      operationId: saveNote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NoteRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Note' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/notes/{id}':
    get:
      tags:
        - Notes
      summary: 'Show note'
      description: 'Show a single note'
      operationId: showNote
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Note' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Notes
      summary: 'Delete note'
      description: 'Delete a single note'
      operationId: deleteNote
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /tokens:
    get:
      tags:
        - Tokens
      summary: 'List tokens'
      description: 'List all personal access tokens'
      operationId: listTokens
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/PersonalAccessToken' } }
                type: object
    post:
      tags:
        - Tokens
      summary: 'Create token'
      description: 'Create a new personal access token'
      operationId: saveToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersonalAccessTokenRequest'
      responses:
        '201':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Token' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/tokens/{id}':
    delete:
      tags:
        - Tokens
      summary: 'Revoke token'
      description: 'Revoke a personal access token'
      operationId: deleteToken
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /price-categories:
    get:
      tags:
        - 'Price category'
      summary: 'List price categories'
      description: 'List all price categories in a bar'
      operationId: listPriceCategories
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/PriceCategory' } }
                type: object
    post:
      tags:
        - 'Price category'
      summary: 'Create price category'
      description: 'Create a new price category'
      operationId: savePriceCategory
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceCategoryRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/PriceCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/price-categories/{id}':
    get:
      tags:
        - 'Price category'
      summary: 'Show price category'
      description: 'Show a single price category'
      operationId: 10017aa4f043f641c210bafc56092997
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/PriceCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - 'Price category'
      summary: 'Update price category'
      description: 'Update a single price category'
      operationId: updatePriceCategory
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PriceCategoryRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/PriceCategory' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - 'Price category'
      summary: 'Delete price category'
      description: 'Delete a single price category'
      operationId: deletePriceCategory
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /profile:
    get:
      tags:
        - Profile
      summary: 'Show profile'
      description: 'Show current user profile information'
      operationId: showProfile
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Profile
      summary: 'Update profile'
      description: 'Update user profile'
      operationId: updateProfile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProfileRequest'
      responses:
        '201':
          description: 'Successful response'
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Profile' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/profile/sso/{provider}':
    delete:
      tags:
        - Profile
      summary: 'Delete SSO provider'
      description: "Delete user's SSO provider"
      operationId: deleteSSO
      parameters:
        -
          name: provider
          in: path
          description: 'Provider ID'
          required: true
          schema:
            $ref: '#/components/schemas/OauthProvider'
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/public/{barId}':
    get:
      tags:
        - Public
      summary: 'Show bar'
      description: 'Show public information about a single bar. To access this endpoint the bar must be marked as public.'
      operationId: showPublicBar
      parameters:
        -
          name: barId
          in: path
          description: 'Database id of bar'
          required: true
          schema:
            type: number
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/PublicBarResource' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  '/public/{barId}/cocktails':
    get:
      tags:
        - Public
      summary: 'List cocktails'
      description: 'List and filter bar cocktails. To access this endpoint the bar must be marked as public.'
      operationId: listPublicBarCocktails
      parameters:
        -
          name: barId
          in: path
          description: 'Database id of bar'
          required: true
          schema:
            type: number
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: filter
          in: query
          description: 'Filter by attributes. You can specify multiple matching filter values by passing a comma separated list of values.'
          style: deepObject
          explode: true
          schema:
            properties:
              name:
                description: 'Filter by cocktail names(s) (fuzzy search)'
                type: string
              ingredient_name:
                description: 'Filter by cocktail ingredient names(s) (fuzzy search)'
                type: string
              tag:
                description: 'Filter by cocktail tag name(s) (fuzzy search)'
                type: string
              glass:
                description: 'Filter by cocktail glass type name(s) (fuzzy search)'
                type: string
              method:
                description: 'Filter by cocktail method name(s) (fuzzy search)'
                type: string
              bar_shelf:
                description: 'Show only cocktails on the bar shelf'
                type: boolean
              abv:
                description: 'Filter by greater than or equal ABV. Use >=, >, <=, < operators (e.g., `filter[abv]=>=20` to get cocktails with ABV greater than or equal to 20).'
                type: number
            type: object
        -
          name: sort
          in: query
          description: 'Sort by attributes. Available attributes: `name`, `created_at`, `abv`, `random`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/PublicCocktailResource' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  '/public/{barId}/cocktails/{slugOrPublicId}':
    get:
      tags:
        - Public
      summary: 'Show cocktail'
      description: 'Show public information about cocktail. If valid public ID is provided it will used, if not it will use cocktail slug.'
      operationId: showPublicBarCocktail
      parameters:
        -
          name: barId
          in: path
          description: 'Database id of bar'
          required: true
          schema:
            type: number
        -
          name: slugOrPublicId
          in: path
          description: 'Cocktail slug or public id (ULID)'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/PublicCocktailResource' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  '/cocktails/{id}/ratings':
    post:
      tags:
        - Ratings
      summary: 'Rate cocktail'
      description: 'Rate a single cocktail'
      operationId: rateCocktail
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                rating:
                  type: integer
              type: object
      responses:
        '204':
          description: 'Successful response'
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Ratings
      summary: 'Delete cocktail rating'
      description: 'Delete current user cocktail rating'
      operationId: deleteRating
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /recommender/cocktails:
    get:
      tags:
        - Recommender
      summary: 'Recommend cocktails'
      description: 'Recommends cocktails based on bar member favorites.'
      operationId: recommendCocktails
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/CocktailBasic' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/auth/sso/{provider}/redirect':
    get:
      tags:
        - Authentication
      summary: 'SSO redirect'
      description: 'Redirect to SSO authentication'
      operationId: ssoRedirect
      parameters:
        -
          name: provider
          in: path
          description: 'Provider ID'
          required: true
          schema:
            $ref: '#/components/schemas/OauthProvider'
      responses:
        '302':
          description: 'Redirect response'
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  '/auth/sso/{provider}/callback':
    get:
      tags:
        - Authentication
      summary: 'SSO callback'
      description: 'Callback for SSO login'
      operationId: ssoCallback
      parameters:
        -
          name: provider
          in: path
          description: 'Provider ID'
          required: true
          schema:
            $ref: '#/components/schemas/OauthProvider'
        -
          name: code
          in: query
          description: 'Oauth token'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Token' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
      security: []
  /auth/sso/providers:
    get:
      tags:
        - Authentication
      summary: 'SSO providers'
      description: 'Configured SSO providers'
      operationId: ssoProviders
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/SSOProvider' } }
                type: object
      security: []
  /server/version:
    get:
      tags:
        - Server
      summary: 'Show information'
      description: 'Show server status and information'
      operationId: showServerVersion
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/ServerVersion' }
                type: object
      security:
        - {  }
  '/users/{id}/ingredients':
    get:
      tags:
        - 'Users: Shelf'
      summary: 'List user ingredients'
      description: 'Ingredients that user saved to their shelf'
      operationId: listUserIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/IngredientBasic' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
  '/users/{id}/cocktails':
    get:
      tags:
        - 'Users: Shelf'
      summary: 'List shelf cocktails'
      description: 'Cocktails that the user can make with ingredients on their shelf'
      operationId: listUserShelfCocktails
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/CocktailBasic' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
  '/users/{id}/cocktails/favorites':
    get:
      tags:
        - 'Users: Shelf'
      summary: 'List favorites'
      description: 'Show a list of cocktails user has favorited'
      operationId: listUserFavoriteCocktails
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/CocktailBasic' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
  '/users/{id}/ingredients/batch-store':
    post:
      tags:
        - 'Users: Shelf'
      summary: 'Save user ingredients'
      description: 'Save multiple ingredients to user shelf'
      operationId: batchStoreUserIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                ingredients:
                  type: array
                  items: { type: integer }
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}/ingredients/batch-delete':
    post:
      tags:
        - 'Users: Shelf'
      summary: 'Delete user ingredients'
      description: 'Delete multiple ingredients from user shelf'
      operationId: batchDeleteUserIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                ingredients:
                  type: array
                  items: { type: integer }
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}/ingredients/recommend':
    get:
      tags:
        - 'Users: Shelf'
      summary: 'Recommend user ingredients'
      description: 'Shows a list of ingredients that will increase total shelf cocktails when added to user shef'
      operationId: recommendIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/IngredientRecommend' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/ingredients':
    get:
      tags:
        - 'Bars: Shelf'
      summary: 'List bar shelf ingredients'
      description: "Ingredients that bar has in it's shelf"
      operationId: listBarShelfIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/IngredientBasic' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
  '/bars/{id}/ingredients/batch-store':
    post:
      tags:
        - 'Bars: Shelf'
      summary: 'Save bar ingredients'
      description: 'Save multiple ingredients to bar shelf'
      operationId: batchStoreBarShelfIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                ingredients:
                  type: array
                  items: { type: integer }
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/ingredients/batch-delete':
    post:
      tags:
        - 'Bars: Shelf'
      summary: 'Delete bar ingredients'
      description: 'Delete multiple ingredients from bar shelf'
      operationId: batchDeleteBarShelfIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                ingredients:
                  type: array
                  items: { type: integer }
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/cocktails':
    get:
      tags:
        - 'Bars: Shelf'
      summary: 'List bar shelf cocktails'
      description: 'Cocktails that the bar can make with ingredients on their shelf'
      operationId: listBarShelfCocktails
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: page
          in: query
          description: 'Set current page number'
          schema:
            type: integer
        -
          name: per_page
          in: query
          description: 'Set number of results per page'
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { description: 'The data for the current page', type: array, items: { $ref: '#/components/schemas/CocktailBasic' } }
                  links: { description: 'Links for pagination', properties: { first: { description: 'Link to the first page', type: [string, 'null'] }, last: { description: 'Link to the last page', type: [string, 'null'] }, prev: { description: 'Link to the previous page', type: [string, 'null'] }, next: { description: 'Link to the next page', type: [string, 'null'] } }, type: object }
                  meta: { properties: { current_page: { description: 'The current page number', type: integer }, from: { description: 'The starting index of the current page', type: integer }, last_page: { description: 'The last page number', type: integer }, links: { type: array, items: { description: 'Links for pagination', properties: { url: { description: 'The URL of the link', type: [string, 'null'] }, label: { description: 'The label of the link', type: [string, 'null'] }, active: { description: 'Whether the link is active', type: [boolean, 'null'] } }, type: object } }, path: { description: 'The path of the current page', type: string }, per_page: { description: 'The number of items per page', type: integer }, to: { description: 'The ending index of the current page', type: integer }, total: { description: 'The total number of items', type: integer } }, type: object }
                type: object
  '/bars/{id}/ingredients/recommend':
    get:
      tags:
        - 'Bars: Shelf'
      summary: 'Recommend bar ingredients'
      description: 'Shows a list of ingredients that will increase total bar shelf cocktails when added to bar shef'
      operationId: recommendBarIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/IngredientRecommend' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}/shopping-list':
    get:
      tags:
        - 'Users: Shopping list'
      summary: 'Show shopping list'
      description: 'List all ingredients on a shopping list'
      operationId: listShoppingListIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/ShoppingList' } }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}/shopping-list/batch-store':
    post:
      tags:
        - 'Users: Shopping list'
      summary: 'Add ingredients'
      description: 'Add multiple ingredients to a shopping list'
      operationId: batchStoreShoppingListIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShoppingListRequest'
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}/shopping-list/batch-delete':
    post:
      tags:
        - 'Users: Shopping list'
      summary: 'Delete ingredients'
      description: 'Remove multiple ingredients from shopping list'
      operationId: batchDeleteShoppingListIngredients
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                ingredients:
                  type: array
                  items: { properties: { id: { type: integer } }, type: object }
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}/shopping-list/share':
    get:
      tags:
        - 'Users: Shopping list'
      summary: 'Share shopping list'
      description: 'Get a shopping list in a specific format'
      operationId: shareShoppingList
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
        -
          name: type
          in: query
          description: 'Type of share. Available types: `markdown`.'
          schema:
            type: string
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { required: [type, content], properties: { type: { type: string, example: markdown }, content: { type: string, example: '<content in requested format>' } }, type: object }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/bars/{id}/stats':
    get:
      tags:
        - Bars
      summary: 'Show bar stats'
      description: 'Show detailed stats about a single bar'
      operationId: showBarStats
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/BarStats' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /billing/subscription:
    get:
      tags:
        - Billing
      summary: 'Show subscription'
      description: 'Show a subscription status'
      operationId: showSubscription
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/UserSubscription' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    post:
      tags:
        - Billing
      summary: 'Update subscription'
      description: 'Update user billing subscription'
      operationId: updateSubscription
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required:
                - type
              properties:
                type:
                  type: string
              type: object
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /tags:
    get:
      tags:
        - Tag
      summary: 'List tags'
      description: 'Show a list of tags in a bar'
      operationId: listTags
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Tag' } }
                type: object
    post:
      tags:
        - Tag
      summary: 'Create tag'
      description: 'Create a new tag'
      operationId: saveTag
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Tag' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/tags/{id}':
    get:
      tags:
        - Tag
      summary: 'Show tag'
      description: 'Show a single tag'
      operationId: showTag
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Tag' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Tag
      summary: 'Update tag'
      description: 'Update a single tag'
      operationId: updateTag
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Tag' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Tag
      summary: 'Delete tag'
      description: 'Delete a single tag'
      operationId: deleteTag
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /users:
    get:
      tags:
        - Users
      summary: 'List users'
      description: 'Show a list of all users in a bar'
      operationId: listUsers
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/User' } }
                type: object
    post:
      tags:
        - Users
      summary: 'Create user'
      description: 'Create a new user'
      operationId: saveUser
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/User' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/users/{id}':
    get:
      tags:
        - Users
      summary: 'Show user'
      description: 'Show a single user'
      operationId: showUser
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/User' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Users
      summary: 'Update user'
      description: 'Update a single user'
      operationId: updateUser
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/User' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Users
      summary: 'Delete user'
      description: 'Delete a single user'
      operationId: deleteUser
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  /utensils:
    get:
      tags:
        - Utensils
      summary: 'List utensils'
      description: 'List all utensils in a bar'
      operationId: listUtensils
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { type: array, items: { $ref: '#/components/schemas/Utensil' } }
                type: object
    post:
      tags:
        - Utensils
      summary: 'Create utensil'
      description: 'Create a new utensil'
      operationId: saveUtensil
      parameters:
        -
          name: Bar-Assistant-Bar-Id
          in: header
          description: 'Database id of a bar.'
          required: false
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UtensilRequest'
      responses:
        '201':
          description: 'Successful response'
          headers:
            Location:
              description: 'URL of the new resource'
              schema:
                type: string
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Utensil' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
  '/utensils/{id}':
    get:
      tags:
        - Utensils
      summary: 'Show utensil'
      description: 'Show a single utensil'
      operationId: showUtensil
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Utensil' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    put:
      tags:
        - Utensils
      summary: 'Update utensil'
      description: 'Update a single utensil'
      operationId: updateUtensil
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UtensilRequest'
      responses:
        '200':
          description: 'Successful response'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                required:
                  - data
                properties:
                  data: { $ref: '#/components/schemas/Utensil' }
                type: object
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
    delete:
      tags:
        - Utensils
      summary: 'Delete utensil'
      description: 'Delete a single utensil'
      operationId: deleteUtensil
      parameters:
        -
          name: id
          in: path
          description: 'Database id of a resource'
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: 'Successful response'
        '403':
          description: 'You are not authorized for this action.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
        '404':
          description: 'Resource record not found.'
          headers:
            x-ratelimit-limit:
              description: 'Max number of attempts.'
              schema:
                type: integer
            x-ratelimit-remaining:
              description: 'Remaining number of attempts.'
              schema:
                type: integer
          content:
            application/json:
              schema:
                properties:
                  data: { $ref: '#/components/schemas/APIError' }
                type: object
components:
  schemas:
    BarOptionsEnum:
      type: string
      enum:
        - ingredients
        - cocktails
    ExportTypeEnum:
      type: string
      enum:
        - datapack
        - schema
        - md
        - json-ld
        - xml
        - yaml
    ForceUnitConvertEnum:
      type: string
      enum:
        - none
        - ml
        - oz
        - cl
    DuplicateActionsEnum:
      type: string
      enum:
        - none
        - skip
        - overwrite
    AmountFormats:
      description: 'Represents the amount of cocktail ingredient in different formats'
      required:
        - ml
        - oz
        - cl
      properties:
        ml:
          required:
            - amount
            - amount_max
            - units
            - full_text
          properties:
            amount:
              type: number
              format: float
              example: 30
            amount_max:
              type: number
              format: float
              example: 60
            units:
              type: string
              example: ml
            full_text:
              type: string
              example: '30-60 ml'
          type: object
        oz:
          required:
            - amount
            - amount_max
            - units
            - full_text
          properties:
            amount:
              type: number
              format: float
              example: 1
            amount_max:
              type: number
              format: float
              example: 2
            units:
              type: string
              example: oz
            full_text:
              type: string
              example: '1-2 oz'
          type: object
        cl:
          required:
            - amount
            - amount_max
            - units
            - full_text
          properties:
            amount:
              type: number
              format: float
              example: 3
            amount_max:
              type: number
              format: float
              example: 6
            units:
              type: string
              example: cl
            full_text:
              type: string
              example: '3-6 cl'
          type: object
      type: object
    BarBasic:
      description: 'Represents a bar with basic information'
      required:
        - id
        - slug
        - name
        - subtitle
      properties:
        id:
          description: 'The ID of the bar'
          type: integer
          example: 1
        slug:
          description: 'The slug of the bar'
          type: string
          example: bar-name-1
        name:
          description: 'The name of the bar'
          type: string
          example: 'Bar name'
        subtitle:
          description: 'The subtitle of the bar'
          type:
            - string
            - 'null'
          example: 'Bar subtitle'
      type: object
    BarMembership:
      description: 'Represents a bar membership'
      required:
        - user_id
        - user_name
        - bar_id
        - is_shelf_public
      properties:
        user_id:
          description: 'The ID of the user'
          type: integer
          example: 1
        user_name:
          description: 'The name of the user'
          type: string
          example: Bartender
        bar_id:
          description: 'The ID of the bar'
          type: integer
          example: 1
        is_shelf_public:
          description: 'Indicates if the shelf is public'
          type: boolean
          example: true
      type: object
    Bar:
      description: 'Details about a bar'
      required:
        - id
        - slug
        - name
        - subtitle
        - description
        - invite_code
        - status
        - settings
        - search_host
        - search_token
        - created_at
        - updated_at
        - access
        - is_public
      properties:
        id:
          description: 'Unique number that can be used to reference a specific bar.'
          type: integer
          example: 1
        slug:
          description: 'Unique string that can be used to reference a specific bar.'
          type: string
          example: bar-name-1
        name:
          description: 'Name of the bar'
          type: string
          example: 'Bar name'
        subtitle:
          description: 'Optional short quip about the bar'
          type:
            - string
            - 'null'
          example: 'A short subtitle of a bar'
        description:
          description: 'Description of the bar'
          type:
            - string
            - 'null'
          example: 'Bar description'
        invite_code:
          description: 'Random code used to invite people to the bar'
          type:
            - string
            - 'null'
          example: 01H8S3VH2HTEB3D893AW8NTBBC
        status:
          $ref: '#/components/schemas/BarStatusEnum'
          description: 'Current status of the bar'
        settings:
          $ref: '#/components/schemas/BarSettings'
          description: 'Settings for the bar'
        search_host:
          description: "Host URL used to access the bar's search engine"
          type:
            - string
            - 'null'
          example: my.test.com
        search_token:
          description: "Auth token used to access the bar's search engine"
          type:
            - string
            - 'null'
          example: null
        created_at:
          description: 'Date and time when the bar was created'
          type: string
          format: date-time
        updated_at:
          description: 'Date and time when the bar was last updated'
          type:
            - string
            - 'null'
          format: date-time
        created_user:
          $ref: '#/components/schemas/UserBasic'
          description: 'User who created the bar'
        updated_user:
          oneOf:
            -
              $ref: '#/components/schemas/UserBasic'
              description: 'User who last updated the bar'
            -
              type: 'null'
          description: 'User who last updated the bar'
        access:
          description: 'User access rights for the bar'
          required:
            - role_id
            - can_edit
            - can_delete
            - can_activate
            - can_deactivate
          properties:
            role_id:
              type: integer
              example: 1
            can_edit:
              type: boolean
              example: true
            can_delete:
              type: boolean
              example: true
            can_activate:
              type: boolean
              example: true
            can_deactivate:
              type: boolean
              example: true
          type: object
        images:
          description: 'Images associated with the bar'
          type: array
          items:
            $ref: '#/components/schemas/Image'
        is_public:
          type: boolean
          default: false
          example: true
      type: object
    CalculatorBlock:
      description: 'Represents a calculator block with basic information'
      required:
        - sort
        - label
        - variable_name
        - value
        - description
        - settings
      properties:
        label:
          description: 'The label of the block'
          type: string
          example: 'Block label'
        variable_name:
          description: 'The variable name of the block'
          type: string
          example: block_variable_name
        value:
          description: 'The value of the block'
          type: string
          example: block_value
        sort:
          description: 'The sort order of the block'
          type: integer
          example: 1
        type:
          description: 'The type of the block'
          type: string
          example: number
        description:
          description: 'The description of the block'
          type:
            - string
            - 'null'
          example: 'Block description'
        settings:
          $ref: '#/components/schemas/CalculatorBlockSettings'
          description: 'The settings of the block'
      type: object
    Calculator:
      description: 'Represents a calculator with basic information'
      required:
        - id
        - name
        - blocks
      properties:
        id:
          description: 'The ID of the calculator'
          type: integer
          example: 1
        name:
          description: 'The name of the calculator'
          type: string
          example: 'Calculator name'
        description:
          description: 'The description of the calculator'
          type:
            - string
            - 'null'
          example: 'Calculator description'
        blocks:
          description: 'The blocks of the calculator'
          type: array
          items:
            $ref: '#/components/schemas/CalculatorBlock'
      type: object
    CalculatorResult:
      description: 'Represents the result of a calculator'
      required:
        - inputs
        - results
      properties:
        inputs:
          description: 'The inputs of the calculator'
          type: object
          additionalProperties:
            type: string
        results:
          description: 'The results of the calculator'
          type: object
          additionalProperties:
            type: string
      type: object
    CocktailBasic:
      description: 'Minimal cocktail information'
      required:
        - id
        - slug
        - name
      properties:
        id:
          description: 'The ID of the cocktail'
          type: integer
          example: 1
        slug:
          description: 'The slug of the cocktail'
          type: string
          example: old-fashioned-1
        name:
          description: 'The name of the cocktail'
          type: string
          example: 'Old fashioned'
        short_ingredients:
          description: 'List of short ingredient names'
          type: array
          items:
            type: string
            example: Vodka
        image:
          $ref: '#/components/schemas/Image'
      type: object
    CocktailIngredient:
      description: 'Cocktail ingredient'
      required:
        - ingredient
        - sort
        - amount
        - units
        - formatted
        - is_specified
        - note
      properties:
        sort:
          description: 'Sort order of the ingredient'
          type: integer
          example: 1
        amount:
          description: 'Amount of the ingredient'
          type: number
          format: float
          example: 30
        amount_max:
          description: 'Amount of the ingredient'
          type:
            - number
            - 'null'
          format: float
          example: 60
        units:
          description: 'Units of the ingredient'
          type: string
          example: ml
        optional:
          description: 'Is the ingredient optional'
          type: boolean
          example: false
        ingredient:
          $ref: '#/components/schemas/IngredientBasic'
          description: 'Ingredient information'
        substitutes:
          description: 'Substitutes for the ingredient'
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredientSubstitute'
        variants_in_shelf:
          description: 'Variants of the ingredient in the shelf'
          type: array
          items:
            $ref: '#/components/schemas/IngredientBasic'
        note:
          description: 'Additional notes about the ingredient'
          type:
            - string
            - 'null'
          example: 'Additional notes'
        is_specified:
          description: 'Is the ingredient specified (ignores variants in matching)'
          type: boolean
          example: false
        formatted:
          $ref: '#/components/schemas/AmountFormats'
        in_shelf:
          description: "Is the ingredient in the user's shelf"
          type: boolean
          example: true
        in_shelf_as_variant:
          description: "Is the ingredient in the user's shelf as a variant"
          type: boolean
          example: true
        in_shelf_as_substitute:
          description: "Is the ingredient in the user's shelf as a substitute"
          type: boolean
          example: true
        in_shelf_as_complex_ingredient:
          description: "Is the ingredient in the user's shelf as a complex ingredient"
          type: boolean
          example: true
        in_bar_shelf:
          description: 'Is the ingredient in the bar shelf'
          type: boolean
          example: true
        in_bar_shelf_as_substitute:
          description: 'Is the ingredient in the bar shelf as a substitute'
          type: boolean
          example: true
        in_bar_shelf_as_complex_ingredient:
          description: 'Is the ingredient in the bar shelf as a complex ingredient'
          type: boolean
          example: true
        in_bar_shelf_as_variant:
          description: 'Is the ingredient in the bar shelf as a variant'
          type: boolean
          example: true
      type: object
    CocktailIngredientSubstitute:
      description: 'Cocktail ingredient substitute'
      required:
        - ingredient
        - amount
        - amount_max
        - units
        - in_shelf
        - in_bar_shelf
      properties:
        ingredient:
          $ref: '#/components/schemas/IngredientBasic'
        amount:
          type:
            - number
            - 'null'
          example: 30
        amount_max:
          type:
            - number
            - 'null'
          example: 60
        units:
          type:
            - string
            - 'null'
          example: ml
        in_shelf:
          type: boolean
          example: true
        in_bar_shelf:
          type: boolean
          example: true
      type: object
    CocktailMethod:
      description: 'Cocktail method resource'
      required:
        - id
        - name
        - dilution_percentage
      properties:
        id:
          description: 'Cocktail method ID'
          type: integer
          example: 1
        name:
          description: 'Cocktail method name'
          type: string
          example: Shake
        dilution_percentage:
          description: 'Dilution percentage'
          type: integer
          example: 20
        cocktails_count:
          description: 'Number of cocktails using this method'
          type: integer
          example: 32
      type: object
    CocktailPrice:
      description: 'Cocktail price resource'
      required:
        - missing_prices_count
        - price_category
        - total_price
        - prices_per_ingredient
      properties:
        missing_prices_count:
          description: 'Number of ingredients that are missing defined prices in this category'
          type: integer
          example: 2
        price_category:
          $ref: '#/components/schemas/PriceCategory'
        total_price:
          $ref: '#/components/schemas/Price'
          description: 'Total cocktail price, sum of `price_per_pour` amounts'
        prices_per_ingredient:
          description: 'Prices per each ingredient.'
          type: array
          items:
            required:
              - ingredient
              - price_per_unit
              - price_per_use
              - units
            properties:
              ingredient:
                $ref: '#/components/schemas/IngredientBasic'
              units:
                description: 'Units used for price calculation'
                type: string
              price_per_unit:
                $ref: '#/components/schemas/Price'
                description: 'Price per 1 unit of ingredient amount'
              price_per_use:
                $ref: '#/components/schemas/Price'
                description: 'Price per cocktail ingredient part'
            type: object
      type: object
    Cocktail:
      description: 'Cocktail resource'
      required:
        - id
        - name
        - slug
        - garnish
        - description
        - instructions
        - source
        - public_id
        - public_at
        - created_at
        - updated_at
        - abv
      properties:
        id:
          description: 'Cocktail ID'
          type: integer
          example: 1
        name:
          description: 'Cocktail name'
          type: string
          example: 'Cocktail name'
        slug:
          description: 'Cocktail slug'
          type: string
          example: cocktail-name-1
        instructions:
          description: 'Cocktail instructions'
          type: string
          example: 'Step by step instructions'
        garnish:
          description: 'Cocktail garnish'
          type:
            - string
            - 'null'
          example: Garnish
        description:
          description: 'Cocktail description'
          type:
            - string
            - 'null'
          example: 'Cocktail description'
        source:
          description: 'Cocktail source'
          type:
            - string
            - 'null'
          example: 'Source of the recipe'
        public_id:
          description: 'Public ID of the cocktail'
          type:
            - string
            - 'null'
          example: public-id-1
        public_at:
          description: 'Public date of the cocktail'
          type:
            - string
            - 'null'
          format: date-time
          example: '2023-10-01T12:00:00Z'
        images:
          description: 'Cocktail images'
          type: array
          items:
            $ref: '#/components/schemas/Image'
        tags:
          description: 'Cocktail tags'
          type: array
          items:
            required:
              - id
              - name
            properties:
              id:
                description: 'Tag ID'
                type: integer
                example: 1
              name:
                description: 'Tag name'
                type: string
                example: 'Tag name'
            type: object
        rating:
          required:
            - user
            - average
            - total_votes
          properties:
            user:
              description: "Current user's rating"
              type:
                - integer
                - 'null'
              example: 1
            average:
              description: 'Average rating'
              type: integer
              example: 4
            total_votes:
              type: integer
              example: 12
          type: object
        glass:
          oneOf:
            -
              $ref: '#/components/schemas/Glass'
              description: 'Cocktail glass'
            -
              type: 'null'
          description: 'Cocktail glass'
        utensils:
          description: 'Cocktail utensils'
          type: array
          items:
            $ref: '#/components/schemas/Utensil'
        ingredients:
          description: 'Cocktail ingredients'
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredient'
        created_at:
          description: 'Creation date of the cocktail'
          type: string
          format: date-time
          example: '2023-10-01T12:00:00Z'
        updated_at:
          description: 'Last update date of the cocktail'
          type:
            - string
            - 'null'
          format: date-time
          example: '2023-10-01T12:00:00Z'
        method:
          oneOf:
            -
              $ref: '#/components/schemas/CocktailMethod'
              description: 'Cocktail method'
            -
              type: 'null'
          description: 'Cocktail method'
        abv:
          description: 'Alcohol by volume (ABV) percentage'
          type:
            - number
            - 'null'
          format: float
          example: 0.5
        volume_ml:
          description: 'Cocktail volume in milliliters'
          type: number
          format: float
          example: 200
        alcohol_units:
          description: 'Alcohol units in the cocktail'
          type: number
          format: float
          example: 1.5
        calories:
          description: 'Calories in the cocktail'
          type: number
          format: float
          example: 150
        created_user:
          $ref: '#/components/schemas/UserBasic'
          description: 'User who created the cocktail'
        updated_user:
          oneOf:
            -
              $ref: '#/components/schemas/UserBasic'
              description: 'User who last updated the cocktail'
            -
              type: 'null'
          description: 'User who last updated the cocktail'
        in_shelf:
          description: "Is the cocktail in the user's shelf"
          type: boolean
          example: true
        in_bar_shelf:
          description: "Is the cocktail in the bar's shelf"
          type: boolean
          example: true
        is_favorited:
          description: 'Is the cocktail favorited by the user'
          type: boolean
          example: true
        access:
          description: 'User access to the cocktail'
          required:
            - can_edit
            - can_delete
            - can_rate
            - can_add_note
          properties:
            can_edit:
              description: 'Can the user edit the cocktail'
              type: boolean
              example: true
            can_delete:
              description: 'Can the user delete the cocktail'
              type: boolean
              example: true
            can_rate:
              description: 'Can the user rate the cocktail'
              type: boolean
              example: true
            can_add_note:
              description: 'Can the user add a note to the cocktail'
              type: boolean
              example: true
          type: object
        parent_cocktail:
          oneOf:
            -
              $ref: '#/components/schemas/CocktailBasic'
              description: 'If this cocktail is a variety of existing cocktail, this will reference the original cocktail'
            -
              type: 'null'
          description: 'If this cocktail is a variety of existing cocktail, this will reference the original cocktail'
        varieties:
          description: 'List of varieties of this cocktail'
          type: array
          items:
            $ref: '#/components/schemas/CocktailBasic'
        year:
          description: 'Cocktail recipe year'
          type:
            - number
            - 'null'
          example: 2023
      type: object
    Collection:
      description: 'Collection resource'
      required:
        - id
        - name
        - description
        - is_bar_shared
        - created_at
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Collection name'
        description:
          type:
            - string
            - 'null'
          example: 'Collection description'
        is_bar_shared:
          type: boolean
        created_at:
          format: date-time
          example: '2023-05-14T21:23:40.000000Z'
        created_user:
          $ref: '#/components/schemas/UserBasic'
        cocktails:
          type: array
          items:
            $ref: '#/components/schemas/CocktailBasic'
      type: object
    CocktailExplore:
      description: 'Cocktail explore resource'
      required:
        - bar
        - name
        - instructions
        - garnish
        - description
        - source
        - tags
        - glass
        - utensils
        - method
        - images
        - ingredients
      properties:
        bar:
          $ref: '#/components/schemas/BarBasic'
        name:
          type: string
          example: 'Cocktail name'
        instructions:
          type: string
          example: 'Step by step instructions'
        garnish:
          type:
            - string
            - 'null'
          example: Garnish
        description:
          type:
            - string
            - 'null'
          example: 'Cocktail description'
        source:
          type:
            - string
            - 'null'
          example: 'Source of the recipe'
        tags:
          type: array
          items:
            type: string
        glass:
          type:
            - string
            - 'null'
        utensils:
          type: array
          items:
            type: string
        method:
          type:
            - string
            - 'null'
        images:
          type: array
          items:
            properties:
              sort:
                type: integer
                example: 1
              placeholder_hash:
                type: string
                example: a1b2c3d4e5f6g7h8i9j0
              url:
                type: string
                example: 'https://example.com/image.jpg'
              copyright:
                type: string
                example: 'Image copyright'
            type: object
        ingredients:
          type: array
          items:
            properties:
              ingredient:
                properties:
                  name: { type: string, example: 'Ingredient name' }
                type: object
              amount:
                type: number
                example: 30
              amount_max:
                type:
                  - number
                  - 'null'
                example: 45
              units:
                type: string
                example: ml
              optional:
                type: boolean
                example: true
              note:
                type:
                  - string
                  - 'null'
                example: 'Ingredient note'
              substitutes:
                type: array
                items:
                  properties: { ingredient: { properties: { name: { type: string, example: 'Ingredient name' } }, type: object }, amount: { type: [number, 'null'], example: 30 }, amount_max: { type: [number, 'null'], example: 45 }, units: { type: [string, 'null'], example: ml } }
                  type: object
            type: object
        abv:
          description: 'Alcohol by volume (ABV) percentage'
          type:
            - number
            - 'null'
          format: float
          example: 0.5
      type: object
    Export:
      description: 'Export resource'
      properties:
        id:
          type: integer
          example: 1
        filename:
          type: string
          example: cocktails.csv
        created_at:
          type: string
          format: date-time
        bar_name:
          type: string
          example: 'Bar name'
        is_done:
          type: boolean
          example: true
      type: object
    FeedsRecipe:
      title: FeedsRecipe
      description: 'Represents a recipe from an RSS/Atom feed'
      required:
        - source
        - title
        - link
        - date
        - image
        - description
      properties:
        source:
          description: 'The source of the recipe'
          type: string
        title:
          description: 'The title of the recipe'
          type: string
        description:
          description: 'The description of the recipe'
          type:
            - string
            - 'null'
        link:
          description: 'The link to the recipe'
          type: string
        date:
          description: 'The date the recipe was modified'
          type:
            - string
            - 'null'
          format: date-time
        image:
          description: 'The image URL of the recipe'
          type:
            - string
            - 'null'
        supports_recipe_import:
          description: 'Indicates if the recipe supports import into the application'
          type: boolean
      type: object
    Glass:
      description: 'Represents glassware'
      required:
        - id
        - name
        - description
        - cocktails_count
        - volume
        - volume_units
      properties:
        id:
          description: 'The ID of the glassware'
          type: integer
          example: 1
        name:
          description: 'The name of the glassware'
          type: string
          example: Lowball
        description:
          description: 'The description of the glassware'
          type:
            - string
            - 'null'
          example: 'Glass for smaller cocktails'
        cocktails_count:
          description: 'The number of cocktails that use this glassware'
          type: integer
          example: 32
        volume:
          description: 'The volume of the glassware'
          type:
            - number
            - 'null'
          format: float
          example: 120
        volume_units:
          description: 'The volume units of the glassware'
          type:
            - string
            - 'null'
          example: ml
        images:
          description: 'Glassware images'
          type: array
          items:
            $ref: '#/components/schemas/Image'
      type: object
    Image:
      description: 'Image attached to a specific resource'
      required:
        - id
        - file_path
        - url
        - copyright
        - sort
        - placeholder_hash
      properties:
        id:
          description: 'The ID of the image'
          type: integer
          example: 1
        file_path:
          description: 'The file path of the image'
          type: string
          example: cocktails/1/image.jpg
        url:
          description: 'The URL of the image'
          type:
            - string
            - 'null'
          example: 'http://example.com/uploads/cocktails/1/image.jpg'
        thumb_url:
          description: 'The thumbnail URL of the image'
          type:
            - string
            - 'null'
          example: 'http://example.com/uploads/cocktails/1/thumb'
        copyright:
          description: 'The copyright information of the image'
          type:
            - string
            - 'null'
          example: 'Image copyright'
        sort:
          description: 'The sort order of the image'
          type: integer
          example: 1
        placeholder_hash:
          description: 'The placeholder hash for the image'
          type:
            - string
            - 'null'
          example: 1QcSHQRnh493V4dIh4eXh1h4kJUI
      type: object
    IngredientBasic:
      description: 'Minimal ingredient information'
      required:
        - id
        - slug
        - name
      properties:
        id:
          description: 'The ID of the ingredient'
          type: integer
          example: 1
        slug:
          description: 'The slug of the ingredient'
          type: string
          example: gin-1
        name:
          description: 'The name of the ingredient'
          type: string
          example: Gin
        image:
          $ref: '#/components/schemas/Image'
          description: 'Main resource image'
      type: object
    IngredientPrice:
      description: 'Ingredient price'
      required:
        - price_category
        - price
        - amount
        - units
        - description
        - created_at
        - updated_at
      properties:
        price_category:
          $ref: '#/components/schemas/PriceCategory'
        price:
          $ref: '#/components/schemas/Price'
        amount:
          type: number
          example: 30
        units:
          type: string
          example: ml
        description:
          type:
            - string
            - 'null'
          example: 'Updated price'
        created_at:
          type: string
          format: date-time
        updated_at:
          type:
            - string
            - 'null'
          format: date-time
      type: object
    Ingredient:
      description: 'Represents an ingredient'
      required:
        - id
        - slug
        - name
        - description
        - origin
        - color
        - created_at
        - updated_at
        - strength
        - hierarchy
        - materialized_path
      properties:
        id:
          description: 'The ID of the ingredient'
          type: integer
          example: 1
        slug:
          description: 'The slug of the ingredient'
          type: string
          example: vodka
        name:
          description: 'The name of the ingredient'
          type: string
          example: Vodka
        strength:
          description: 'The strength of the ingredient'
          type: number
          format: float
          example: 40
        description:
          description: 'The description of the ingredient'
          type:
            - string
            - 'null'
          example: 'Vodka is a clear distilled alcoholic beverage'
        origin:
          description: 'The origin of the ingredient'
          type:
            - string
            - 'null'
          example: Russia
        created_at:
          description: 'The creation date of the ingredient'
          type: string
          format: date-time
          example: '2023-01-01T00:00:00Z'
        updated_at:
          description: 'The last update date of the ingredient'
          type:
            - string
            - 'null'
          format: date-time
          example: '2023-01-01T00:00:00Z'
        materialized_path:
          description: 'The materialized path of the ingredient'
          type:
            - string
            - 'null'
          example: 1.2.3
        hierarchy:
          $ref: '#/components/schemas/IngredientHierarchy'
          description: 'The hierarchy of the ingredient'
        images:
          description: 'The images of the ingredient'
          type: array
          items:
            $ref: '#/components/schemas/Image'
        color:
          description: 'The color of the ingredient'
          type:
            - string
            - 'null'
          example: '#ffffff'
        cocktails_count:
          description: 'The number of cocktails that use this ingredient'
          type: integer
          example: 12
        cocktails_as_substitute_count:
          description: 'Number of cocktails that use this ingredient as a substitute'
          type: integer
          example: 1
        created_user:
          $ref: '#/components/schemas/UserBasic'
          description: 'The user who created the ingredient'
        updated_user:
          oneOf:
            -
              $ref: '#/components/schemas/UserBasic'
              description: 'The user who created the ingredient'
            -
              type: 'null'
          description: 'The user who created the ingredient'
        access:
          description: 'Access rights for the ingredient'
          properties:
            can_edit:
              description: 'Whether the user can edit the ingredient'
              type: boolean
              example: true
            can_delete:
              description: 'Whether the user can delete the ingredient'
              type: boolean
              example: false
          type: object
        in_shelf:
          description: 'Whether the user has this ingredient in their shelf'
          type: boolean
          example: true
        in_shelf_as_variant:
          description: 'Whether the user has this ingredient in their shelf as a variant'
          type: boolean
          example: true
        in_bar_shelf:
          description: 'Whether the bar has this ingredient in their shelf'
          type: boolean
          example: true
        in_bar_shelf_as_variant:
          description: 'Whether the bar has this ingredient in their shelf as a variant'
          type: boolean
          example: true
        in_shopping_list:
          description: 'Whether the user has this ingredient in their shopping list'
          type: boolean
          example: true
        used_as_substitute_for:
          description: 'Ingredients that this ingredient is used as a substitute for'
          type: array
          items:
            $ref: '#/components/schemas/IngredientBasic'
        can_be_substituted_with:
          description: 'Ingredients that can be substituted with this ingredient'
          type: array
          items:
            $ref: '#/components/schemas/IngredientBasic'
        ingredient_parts:
          description: 'Parts of this ingredient'
          type: array
          items:
            $ref: '#/components/schemas/IngredientBasic'
        prices:
          description: 'Prices of the ingredient'
          type: array
          items:
            $ref: '#/components/schemas/IngredientPrice'
        calculator_id:
          description: 'The calculator ID of the ingredient'
          type:
            - integer
            - 'null'
          example: 1
        sugar_g_per_ml:
          description: 'The sugar content of the ingredient in grams per milliliter'
          type:
            - number
            - 'null'
          format: float
          example: 0
        acidity:
          description: 'The acidity of the ingredient'
          type:
            - number
            - 'null'
          format: float
          example: 0
        distillery:
          description: 'The distillery of the ingredient'
          type:
            - string
            - 'null'
          example: 'Distillery Name'
        units:
          description: 'The units of the ingredient'
          type:
            - string
            - 'null'
          example: ml
      type: object
    IngredientTree:
      description: 'Represents an ingredient tree with its children'
      required:
        - ingredient
        - children
      properties:
        ingredient:
          $ref: '#/components/schemas/IngredientBasic'
        children:
          description: 'Recursive list of child ingredients'
          type: array
          items:
            $ref: '#/components/schemas/IngredientTree'
      type: object
    MenuPublic:
      description: 'Menu resource'
      required:
        - bar
        - categories
      properties:
        bar:
          description: 'Bar information'
          required:
            - name
            - subtitle
            - description
          properties:
            name:
              type: string
              example: 'Bar name'
            subtitle:
              type:
                - string
                - 'null'
              example: 'Bar subtitle'
            description:
              type:
                - string
                - 'null'
              example: 'Bar description'
            images:
              description: 'Bar images (like bar logo)'
              type: array
              items:
                type: string
              example:
                - 'https://example.com/image1.jpg'
                - 'https://example.com/image2.jpg'
          type: object
        categories:
          description: 'List of menu categories'
          type: array
          items:
            required:
              - name
              - items
            properties:
              name:
                type: string
                example: 'Category name'
              items:
                type: array
                items:
                  required: [in_bar_shelf, type, sort, price, public_id, name, description]
                  properties: { in_bar_shelf: { type: boolean, example: false }, type: { $ref: '#/components/schemas/MenuItemTypeEnum' }, sort: { type: integer, example: 1 }, price: { $ref: '#/components/schemas/Price' }, public_id: { type: [string, 'null'], example: 01ARZ3NDEKTSV4RRFFQ69G5FAV }, name: { type: string, example: 'Cocktail name' }, description: { type: [string, 'null'] }, image: { description: 'Image URL', type: [string, 'null'] } }
                  type: object
            type: object
      type: object
    Menu:
      description: 'Menu resource'
      required:
        - id
        - is_enabled
        - created_at
        - updated_at
        - categories
      properties:
        id:
          description: 'Menu ID'
          type: integer
          example: 1
        is_enabled:
          description: 'Is menu enabled'
          type: boolean
          example: true
        created_at:
          description: 'Creation date'
          type: string
          format: date-time
        updated_at:
          description: 'Last update date'
          type:
            - string
            - 'null'
          format: date-time
        categories:
          type: array
          items:
            required:
              - name
              - items
            properties:
              name:
                type: string
                example: 'Category name'
              items:
                type: array
                items:
                  required: [id, type, sort, price, name, description]
                  properties: { id: { type: integer, example: 1 }, type: { $ref: '#/components/schemas/MenuItemTypeEnum' }, sort: { type: integer, example: 1 }, price: { $ref: '#/components/schemas/Price' }, name: { description: 'Cocktail name', type: string, example: 'Cocktail name' }, description: { type: [string, 'null'], example: 'Cocktail description' } }
                  type: object
            type: object
      type: object
    Note:
      description: 'Note resource'
      required:
        - id
        - note
        - user_id
        - created_at
      properties:
        id:
          description: 'Note ID'
          type: integer
          example: 1
        note:
          description: 'Note text'
          type: string
          example: 'Note text'
        user_id:
          description: 'User ID'
          type: integer
          example: 1
        created_at:
          description: 'Creation date and time'
          type: string
          format: date-time
          example: '2022-01-01T00:00:00+00:00'
      type: object
    OauthCredential:
      description: 'OAuth Credential information'
      required:
        - provider
        - created_at
        - updated_at
      properties:
        provider:
          $ref: '#/components/schemas/SSOProvider'
        created_at:
          type: string
          format: date-time
        updated_at:
          type:
            - string
            - 'null'
          format: date-time
      type: object
    PersonalAccessToken:
      description: 'Personal Access Token'
      required:
        - id
        - name
        - abilities
        - last_used_at
        - created_at
        - expires_at
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: user_generated
        abilities:
          type: array
          items:
            type: string
          example:
            - cocktails.read
            - cocktails.write
            - ingredients.read
            - ingredients.write
        last_used_at:
          type: string
          format: date-time
          example: '2023-05-14T21:23:40.000000Z'
        created_at:
          type: string
          format: date-time
          example: '2023-05-14T21:23:40.000000Z'
        expires_at:
          type: string
          format: date-time
          example: '2023-05-14T21:23:40.000000Z'
      type: object
    PriceCategory:
      description: 'Price category'
      required:
        - id
        - name
        - description
        - currency
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'Amazon (DE)'
        description:
          type:
            - string
            - 'null'
          example: 'Current price on amazon.de'
        currency:
          type: string
          format: 'ISO 4217'
          example: EUR
        currency_symbol:
          type: string
          example: €
      type: object
    Price:
      description: 'Schema representing a price'
      required:
        - price
        - price_minor
        - formatted_price
        - currency
      properties:
        price:
          description: 'Price in major units (e.g., euros)'
          type: number
          example: 13.39
        price_minor:
          description: 'Price in minor units (e.g., cents)'
          type: integer
          example: 1339
        formatted_price:
          description: 'Pretty formatted price string'
          type: string
          example: 'EUR 13.39'
        currency:
          description: 'Currency code in ISO 4217 format'
          type: string
          example: EUR
      type: object
    Profile:
      description: 'User profile resource'
      required:
        - id
        - name
        - email
        - is_subscribed
        - memberships
        - oauth_credentials
        - settings
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Floral
        email:
          description: 'User email'
          type: string
          format: email
          example: example@example.com
        is_subscribed:
          description: 'Is user subscribed'
          type: boolean
          example: true
        memberships:
          description: 'User memberships'
          type: array
          items:
            $ref: '#/components/schemas/BarMembership'
        oauth_credentials:
          description: 'OAuth credentials'
          type: array
          items:
            $ref: '#/components/schemas/OauthCredential'
        settings:
          $ref: '#/components/schemas/ProfileSettings'
      type: object
    PublicBarResource:
      description: 'Public details about a bar'
      required:
        - id
        - slug
        - name
        - subtitle
        - description
        - images
      properties:
        id:
          description: 'Unique number that can be used to reference a specific bar.'
          type: integer
          example: 1
        slug:
          description: 'Unique string that can be used to reference a specific bar.'
          type: string
          example: bar-name-1
        name:
          description: 'Name of the bar'
          type: string
          example: 'Bar name'
        subtitle:
          description: 'Optional short quip about the bar'
          type:
            - string
            - 'null'
          example: 'A short subtitle of a bar'
        description:
          description: 'Description of the bar'
          type:
            - string
            - 'null'
          example: 'Bar description'
        images:
          description: 'Images associated with the bar'
          type: array
          items:
            $ref: '#/components/schemas/PublicImageResource'
      type: object
    PublicCocktailResource:
      description: 'Public details about a cocktail'
      required:
        - slug
        - name
        - instructions
        - garnish
        - description
        - source
        - public_id
        - public_at
        - images
        - tags
        - glass
        - utensils
        - method
        - created_at
        - abv
        - year
        - ingredients
      properties:
        slug:
          description: 'Unique string that can be used to reference a specific cocktail.'
          type: string
          example: cocktail-name-1
        name:
          description: 'Name of the cocktail'
          type: string
          example: 'Cocktail Name'
        instructions:
          description: 'Instructions for preparing the cocktail'
          type: string
          example: 'Shake well and serve.'
        garnish:
          description: 'Garnish for the cocktail'
          type:
            - string
            - 'null'
          example: 'Lemon twist'
        description:
          description: 'Description of the cocktail'
          type:
            - string
            - 'null'
          example: 'A refreshing cocktail with a twist.'
        source:
          description: 'Source of the cocktail recipe'
          type:
            - string
            - 'null'
          example: 'https://example.com/cocktail-recipe'
        public_id:
          description: 'Public identifier (ULID) for the cocktail'
          type: string
          example: '12345'
        public_at:
          description: 'Date and time when the cocktail was made public'
          type:
            - string
            - 'null'
          format: date-time
          example: '2023-10-01T12:00:00Z'
        images:
          description: 'Images associated with the cocktail'
          type: array
          items:
            $ref: '#/components/schemas/PublicImageResource'
        tags:
          description: 'Tags associated with the cocktail'
          type: array
          items:
            type: string
        glass:
          description: 'Type of glass used for the cocktail'
          type:
            - string
            - 'null'
          example: 'Highball glass'
        utensils:
          description: 'Utensils used for preparing the cocktail'
          type: array
          items:
            type: string
        method:
          description: 'Method of preparation for the cocktail'
          type:
            - string
            - 'null'
          example: Shaken
        method_dilution_percentage:
          description: 'Dilution percentage associated with the preparation method'
          type:
            - number
            - 'null'
          example: '12'
        volume_ml:
          description: 'Total volume of the cocktail in milliliters'
          type:
            - number
            - 'null'
          example: '120'
        created_at:
          description: 'Date and time when the cocktail was created'
          type: string
          format: date-time
          example: '2023-10-01T12:00:00Z'
        in_bar_shelf:
          description: 'Indicates if the cocktail can be made in the current bar'
          type: boolean
          example: true
        abv:
          description: 'Alcohol by volume percentage of the cocktail'
          type:
            - number
            - 'null'
          format: float
          example: 0.15
        year:
          description: 'Year the cocktail was created or published'
          type:
            - integer
            - 'null'
          example: 2023
        ingredients:
          description: 'List of ingredients required to make the cocktail'
          type: array
          items:
            required:
              - name
              - amount
              - amount_max
              - units
              - units_formatted
              - optional
              - note
              - substitutes
            properties:
              name:
                description: 'Name of the ingredient'
                type: string
                example: Gin
              amount:
                description: 'Amount of the ingredient in the cocktail'
                type: number
                format: float
                example: 50
              amount_max:
                description: 'Maximum amount of the ingredient that can be used'
                type:
                  - number
                  - 'null'
                format: float
                example: null
              units:
                description: 'Units of measurement for the ingredient amount'
                type: string
                example: ml
              units_formatted:
                $ref: '#/components/schemas/AmountFormats'
                description: 'Formatted units for the ingredient amount'
              optional:
                description: 'Indicates if the ingredient is optional'
                type: boolean
                example: false
              note:
                description: 'Additional notes about the ingredient'
                type:
                  - string
                  - 'null'
                example: 'Use fresh gin for best results.'
              substitutes:
                description: 'List of substitute ingredients that can be used in place of this ingredient'
                type: array
                items:
                  required: [name, amount, amount_max, units]
                  properties: { name: { description: 'Name of the substitute ingredient', type: string, example: Vodka }, amount: { description: 'Amount of the substitute ingredient', type: number, format: float, example: 50 }, amount_max: { description: 'Maximum amount of the substitute ingredient that can be used', type: [number, 'null'], format: float, example: null }, units: { description: 'Units of measurement for the substitute ingredient amount', type: string, example: ml } }
                  type: object
            type: object
      type: object
    PublicImageResource:
      description: 'Public details about an image'
      required:
        - sort
        - placeholder_hash
        - url
        - copyright
      properties:
        sort:
          description: 'Sort order of the image'
          type: integer
          example: 1
        placeholder_hash:
          description: 'Placeholder hash for the image, used for lazy loading'
          type: string
          example: abc123
        url:
          description: 'URL of the image'
          type: string
          format: uri
          example: 'https://example.com/image.jpg'
        copyright:
          description: 'Copyright information for the image'
          type:
            - string
            - 'null'
          example: 'Author name'
      type: object
    SSOProvider:
      description: 'SSO Provider information'
      required:
        - name
        - display_name
        - enabled
      properties:
        name:
          type: string
          example: github
        display_name:
          type: string
          example: GitHub
        enabled:
          description: 'Whether the provider is configured and enabled by server'
          type: boolean
          example: true
      type: object
    Subscription:
      description: 'Subscription resource'
      required:
        - type
        - paddle_id
        - status
        - created_at
        - updated_at
        - paused_at
        - ends_at
        - past_due
        - is_recurring
        - next_billed_at
        - update_payment_url
        - cancel_url
      properties:
        type:
          type: string
        paddle_id:
          type: string
        status:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        paused_at:
          type: string
          format: date-time
        ends_at:
          type: string
          format: date-time
        past_due:
          type: boolean
        is_recurring:
          type: boolean
        next_billed_at:
          required:
            - currency
            - amount
            - date
          properties:
            currency:
              type: string
            amount:
              type: string
            date:
              type: string
              format: date-time
          type:
            - object
            - 'null'
        update_payment_url:
          type: string
          format: uri
        cancel_url:
          type: string
          format: uri
        transactions:
          type: array
          items:
            required:
              - total
              - tax
              - currency
              - status
              - invoice_number
              - url
              - billed_at
              - created_at
              - updated_at
            properties:
              total:
                type: string
              tax:
                type: string
              currency:
                type: string
              status:
                type: string
              invoice_number:
                type: string
              url:
                type: string
                format: uri
              billed_at:
                type: string
                format: date-time
              created_at:
                type: string
                format: date-time
              updated_at:
                type:
                  - string
                  - 'null'
                format: date-time
            type: object
      type: object
    Tag:
      description: 'Represents a tag with basic information'
      required:
        - id
        - name
        - cocktails_count
      properties:
        id:
          description: 'The ID of the tag'
          type: integer
          example: 1
        name:
          description: 'The name of the tag'
          type: string
          example: Floral
        cocktails_count:
          description: 'The number of cocktails associated with the tag'
          type: integer
          example: 12
      type: object
    Token:
      description: 'Auth token resource'
      required:
        - token
      properties:
        token:
          description: 'Access token'
          type: string
          example: 1|dvWHLWuZbmWWFbjaUDla393Q9jK5Ou9ujWYPcvII
      type: object
    UserBasic:
      description: 'Represents a user with basic information'
      required:
        - id
        - name
      properties:
        id:
          description: 'The ID of the user'
          type: integer
          example: 1
        name:
          description: 'The name of the user'
          type: string
          example: Bartender
      type: object
    User:
      description: 'Represents a user in current bar'
      required:
        - id
        - name
        - email
        - is_subscribed
        - role
      properties:
        id:
          description: 'User ID'
          type: integer
          example: 1
        name:
          description: 'User name'
          type: string
          example: Bartender
        email:
          description: 'User email'
          type: string
          example: test@email.com
        is_subscribed:
          description: 'Subscription status'
          type: boolean
          example: true
        role:
          required:
            - bar_id
            - role_id
            - role_name
          properties:
            bar_id:
              description: 'Bar ID'
              type: integer
              example: 1
            role_id:
              description: 'Role ID'
              type:
                - integer
                - 'null'
              example: 1
            role_name:
              description: 'Role name'
              type:
                - string
                - 'null'
              example: Admin
          type: object
      type: object
    ShoppingList:
      description: 'Shopping list resource'
      required:
        - ingredient
        - quantity
      properties:
        ingredient:
          $ref: '#/components/schemas/IngredientBasic'
        quantity:
          type:
            - integer
            - 'null'
          example: 3
      type: object
    UserSubscription:
      description: 'User subscription resource'
      required:
        - prices
        - customer
        - subscription
      properties:
        prices:
          type: array
          items:
            type: string
        customer:
          required:
            - paddle_id
            - paddle_email
            - paddle_name
          properties:
            paddle_id:
              type:
                - string
                - 'null'
            paddle_email:
              type:
                - string
                - 'null'
            paddle_name:
              type:
                - string
                - 'null'
          type: object
        subscription:
          oneOf:
            -
              $ref: '#/components/schemas/Subscription'
            -
              type: 'null'
      type: object
    Utensil:
      description: 'Represents a utensil with basic information'
      required:
        - id
        - name
        - description
      properties:
        id:
          description: 'The ID of the utensil'
          type: integer
          example: 1
        name:
          description: 'The name of the utensil'
          type: string
          example: Shaker
        description:
          description: 'The description of the utensil'
          type:
            - string
            - 'null'
          example: 'Used to shake ingredients'
      type: object
    AbilityEnum:
      type: string
      enum:
        - cocktails.read
        - cocktails.write
        - cocktails.import
        - ingredients.read
        - ingredients.write
        - bars.read
        - bars.write
    BarStatusEnum:
      type: string
      enum:
        - provisioning
        - active
        - deactivated
    CalculatorBlockTypeEnum:
      type: string
      enum:
        - input
        - eval
    MenuItemTypeEnum:
      type: string
      enum:
        - cocktail
        - ingredient
    APIError:
      required:
        - type
        - message
      properties:
        type:
          type: string
          example: api_error
        message:
          type: string
          example: 'Resource record not found.'
      type: object
    BarRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: 'Bar name'
        subtitle:
          type:
            - string
            - 'null'
          example: 'A short subtitle of a bar'
        description:
          type:
            - string
            - 'null'
          example: 'Bar description'
        slug:
          type:
            - string
            - 'null'
          example: bar-name-1
        default_units:
          description: 'Used only as a setting for client apps.'
          type: string
          enum:
            - ml
            - cl
            - oz
          example: ml
        default_currency:
          description: 'ISO 4217 format of currency. Used only as a setting for client apps.'
          type:
            - string
            - 'null'
          example: EUR
        enable_invites:
          description: 'Enable users with invite code to join this bar. Default `false`.'
          type: boolean
        options:
          oneOf:
            -
              $ref: '#/components/schemas/BarOptionsEnum'
              description: 'List of data that the bar will start with. Cocktails cannot be imported without ingredients.'
            -
              type: 'null'
          description: 'List of data that the bar will start with. Cocktails cannot be imported without ingredients.'
        images:
          description: 'Existing image ids'
          type: array
          items:
            type: integer
        is_public:
          description: 'Allow public access to bar recipes. Default `false`.'
          type: boolean
      type: object
    BarSettings:
      properties:
        default_units:
          type:
            - string
            - 'null'
        default_currency:
          type:
            - string
            - 'null'
      type: object
    BarStats:
      required:
        - total_cocktails
        - total_ingredients
        - total_favorited_cocktails
        - total_shelf_cocktails
        - total_bar_shelf_ingredients
        - total_bar_shelf_cocktails
        - total_shelf_ingredients
        - total_bar_members
        - total_collections
        - favorite_tags
        - your_top_ingredients
        - most_popular_ingredients
        - top_rated_cocktails
      properties:
        total_cocktails:
          type: integer
          example: 1
        total_ingredients:
          type: integer
          example: 1
        total_favorited_cocktails:
          type: integer
          example: 1
        total_shelf_cocktails:
          type: integer
          example: 1
        total_shelf_ingredients:
          type: integer
          example: 1
        total_bar_shelf_ingredients:
          type: integer
          example: 1
        total_bar_shelf_cocktails:
          type: integer
          example: 1
        total_bar_members:
          type: integer
          example: 1
        total_collections:
          type: integer
          example: 1
        favorite_tags:
          type: array
          items:
            required:
              - id
              - name
              - cocktails_count
            properties:
              id:
                type: integer
                example: 31
              name:
                type: string
                example: 'Tag name'
              cocktails_count:
                type: integer
                example: 12
            type: object
        your_top_ingredients:
          type: array
          items:
            required:
              - id
              - slug
              - name
              - cocktails_count
            properties:
              id:
                type: integer
                example: 1
              slug:
                type: string
                example: gin
              name:
                type: string
                example: Gin
              cocktails_count:
                type: integer
                example: 1
            type: object
        most_popular_ingredients:
          type: array
          items:
            required:
              - id
              - slug
              - name
              - cocktails_count
            properties:
              id:
                type: integer
                example: 1
              slug:
                type: string
                example: gin
              name:
                type: string
                example: Gin
              cocktails_count:
                type: integer
                example: 1
            type: object
        top_rated_cocktails:
          type: array
          items:
            required:
              - id
              - slug
              - name
              - avg_rating
              - votes
            properties:
              id:
                type: integer
                example: 1
              slug:
                type: string
                example: old-fashioned
              name:
                type: string
                example: 'Old Fashioned'
              avg_rating:
                type: integer
                example: 3
              votes:
                type: integer
                example: 42
            type: object
      type: object
    CalculatorBlockRequest:
      required:
        - label
        - variable_name
        - value
        - type
        - settings
        - sort
      properties:
        label:
          type: string
        variable_name:
          type: string
        value:
          type: string
        type:
          $ref: '#/components/schemas/CalculatorBlockTypeEnum'
        settings:
          $ref: '#/components/schemas/CalculatorBlockSettings'
        description:
          type:
            - string
            - 'null'
        sort:
          type: integer
      type: object
    CalculatorBlockSettings:
      properties:
        suffix:
          type:
            - string
            - 'null'
        prefix:
          type:
            - string
            - 'null'
        decimal_places:
          type:
            - string
            - 'null'
      type: object
    CalculatorRequest:
      required:
        - name
      properties:
        name:
          type: string
        blocks:
          type: array
          items:
            $ref: '#/components/schemas/CalculatorBlockRequest'
        description:
          type:
            - string
            - 'null'
      type: object
    CalculatorSolveRequest:
      required:
        - inputs
      properties:
        inputs:
          type: object
          additionalProperties:
            type: string
      type: object
    CocktailIngredientRequest:
      required:
        - ingredient_id
        - amount
        - units
      properties:
        ingredient_id:
          type: integer
        name:
          type:
            - string
            - 'null'
        amount:
          type: number
          format: float
          example: 30
        units:
          type: string
          example: ml
        sort:
          type: integer
        optional:
          type: boolean
        is_specified:
          description: 'Ignores descendants as possible substitutes'
          type: boolean
        substitutes:
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredientSubstituteRequest'
        amount_max:
          type:
            - number
            - 'null'
          format: float
          example: 60
        note:
          type:
            - string
            - 'null'
      type: object
    CocktailIngredientSubstituteRequest:
      required:
        - ingredient_id
      properties:
        ingredient_id:
          type: integer
        amount:
          type:
            - number
            - 'null'
          format: float
          example: 30
        amount_max:
          type:
            - number
            - 'null'
          format: float
          example: 60
        units:
          type:
            - string
            - 'null'
          example: ml
      type: object
    CocktailMethodRequest:
      required:
        - name
        - dilution_percentage
      properties:
        name:
          type: string
          example: Shake
        dilution_percentage:
          type: integer
          example: 20
      type: object
    CocktailRequest:
      required:
        - name
        - instructions
      properties:
        name:
          type: string
          example: 'Cocktail name'
        instructions:
          type: string
          example: 'Step by step instructions'
        description:
          type:
            - string
            - 'null'
          example: 'Cocktail description'
        source:
          type:
            - string
            - 'null'
          example: 'Source of the recipe'
        garnish:
          type:
            - string
            - 'null'
          example: Garnish
        glass_id:
          type:
            - integer
            - 'null'
          example: 1
        method_id:
          type:
            - integer
            - 'null'
          example: 1
        tags:
          type: array
          items:
            type: string
        ingredients:
          type: array
          items:
            $ref: '#/components/schemas/CocktailIngredientRequest'
        images:
          description: 'List of existing image ids'
          type: array
          items:
            type: integer
        utensils:
          description: 'List of existing utensil ids'
          type: array
          items:
            type: integer
        parent_cocktail_id:
          type:
            - integer
            - 'null'
          example: 1
        year:
          type:
            - integer
            - 'null'
          example: 2023
      type: object
    CollectionRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: 'Collection name'
        description:
          type:
            - string
            - 'null'
          example: 'Collection description'
        is_bar_shared:
          type: boolean
        cocktails:
          type: array
          items:
            type: integer
      type: object
    ExportRequest:
      properties:
        type:
          $ref: '#/components/schemas/ExportTypeEnum'
        units:
          $ref: '#/components/schemas/ForceUnitConvertEnum'
        bar_id:
          type: integer
      type: object
    FileDownloadLink:
      properties:
        url:
          description: 'Absolute URL to download the export'
          type: string
          example: 'http://example.com/api/exports/29/download?t=2053f2e716f2dcddc0a2b767249235750e549af6d459cb1c65d4720e72404d88&e=1723480826'
        token:
          type: string
          example: 2053f2e716f2dcddc0a2b767249235750e549af6d459cb1c65d4720e72404d88
        expires:
          type: string
          example: '2024-08-12T16:40:26+00:00'
      type: object
    GlassRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Lowball
        description:
          type:
            - string
            - 'null'
          example: 'Glass for smaller cocktails'
        volume:
          type:
            - number
            - 'null'
          format: float
          example: 120
        volume_units:
          type:
            - string
            - 'null'
          example: ml
        images:
          description: 'Existing image ids'
          type: array
          items:
            type: integer
      type: object
    ImageRequest:
      required:
        - image
        - sort
      properties:
        image:
          description: 'Image file. Base64 encoded images also supported. Max 50MB'
          type:
            - string
            - 'null'
          format: binary
        id:
          description: 'Existing image id, used to update an existing image'
          type:
            - integer
            - 'null'
        sort:
          type: integer
          example: 1
        copyright:
          type:
            - string
            - 'null'
          example: 'Image copyright'
      type: object
    IngredientHierarchy:
      description: 'Ingredient hierarchy'
      properties:
        path_to_self:
          description: 'Path to the current ingredient from the root'
          type: string
          example: 'Spirits > Gin'
        parent_ingredient:
          oneOf:
            -
              $ref: '#/components/schemas/IngredientBasic'
            -
              type: 'null'
        descendants:
          type: array
          items:
            $ref: '#/components/schemas/IngredientBasic'
        ancestors:
          type: array
          items:
            $ref: '#/components/schemas/IngredientBasic'
        root_ingredient_id:
          description: 'Root ingredient ID'
          type:
            - string
            - 'null'
      type: object
    IngredientPriceRequest:
      required:
        - price_category_id
        - price
        - amount
        - units
      properties:
        price_category_id:
          type: integer
        price:
          type: integer
        amount:
          type: number
          format: float
        units:
          type: string
        description:
          type:
            - string
            - 'null'
      type: object
    IngredientRecommend:
      description: 'Ingredient recommendation with number of potential cocktails'
      type: object
      allOf:
        -
          $ref: '#/components/schemas/IngredientBasic'
        -
          properties:
            potential_cocktails:
              type: integer
              example: 10
          type: object
    IngredientRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Gin
        strength:
          type: number
          format: float
          example: 40
        description:
          type:
            - string
            - 'null'
          example: 'Gin is a type of alcoholic spirit'
        origin:
          type:
            - string
            - 'null'
          example: Worldwide
        color:
          type:
            - string
            - 'null'
          example: '#ffffff'
        parent_ingredient_id:
          type:
            - integer
            - 'null'
          example: 1
        images:
          description: 'Existing image ids'
          type: array
          items:
            type: integer
        complex_ingredient_part_ids:
          description: 'Existing ingredient ids'
          type: array
          items:
            type: integer
        prices:
          type: array
          items:
            $ref: '#/components/schemas/IngredientPriceRequest'
        calculator_id:
          description: 'Calculator you want to attach to this ingredient'
          type:
            - integer
            - 'null'
          example: 1
        sugar_g_per_ml:
          type:
            - number
            - 'null'
          format: float
          example: 0.24
        acidity:
          type:
            - number
            - 'null'
          format: float
          example: 0.1
        distillery:
          type:
            - string
            - 'null'
          example: 'Buffalo trace'
        units:
          description: 'Default unit that would be used for this ingredient'
          type:
            - string
            - 'null'
          example: ml
      type: object
    LoginRequest:
      required:
        - email
        - password
      properties:
        email:
          type: string
          example: admin@example.com
        password:
          type: string
          format: password
          example: password
        token_name:
          type:
            - string
            - 'null'
          example: 'My device'
      type: object
    MenuItemRequest:
      required:
        - id
        - type
        - category_name
        - sort
        - price
        - currency
      properties:
        id:
          type: integer
          example: 1
        type:
          $ref: '#/components/schemas/MenuItemTypeEnum'
        category_name:
          type: string
          example: 'Category name'
        sort:
          type: integer
          example: 1
        price:
          type: number
          format: float
          example: 22.52
        currency:
          type: string
          format: 'ISO 4217'
          example: EUR
      type: object
    MenuRequest:
      required:
        - is_enabled
        - items
      properties:
        is_enabled:
          type: boolean
        items:
          type: array
          items:
            $ref: '#/components/schemas/MenuItemRequest'
      type: object
    NoteRequest:
      required:
        - note
        - resource_id
        - resource
      properties:
        note:
          type: string
          example: 'Note text'
        resource_id:
          type: integer
          example: 1
        resource:
          type: string
          example: cocktail
      type: object
    PersonalAccessTokenRequest:
      required:
        - abilities
      properties:
        name:
          type:
            - string
            - 'null'
          example: user_generated
        abilities:
          type: array
          items:
            $ref: '#/components/schemas/AbilityEnum'
        expires_at:
          type:
            - string
            - 'null'
          example: '2023-05-14T21:23:40.000000Z'
      type: object
    PriceCategoryRequest:
      required:
        - name
        - currency
      properties:
        name:
          type: string
          example: 'Amazon (DE)'
        description:
          type:
            - string
            - 'null'
          example: 'Current price on amazon.de'
        currency:
          type: string
          format: 'ISO 4217'
          example: EUR
      type: object
    ProfileRequest:
      required:
        - name
        - email
      properties:
        name:
          type: string
          example: 'Bar Tender'
        email:
          type: string
          example: new@email.com
        settings:
          oneOf:
            -
              $ref: '#/components/schemas/ProfileSettings'
            -
              type: 'null'
        bar_id:
          type:
            - integer
            - 'null'
        password:
          type:
            - string
            - 'null'
          format: password
          example: newpassword
        is_shelf_public:
          type: boolean
      type: object
    ProfileSettings:
      properties:
        language:
          type:
            - string
            - 'null'
        theme:
          type:
            - string
            - 'null'
      type: object
    RegisterRequest:
      required:
        - email
        - password
        - name
      properties:
        email:
          type: string
          example: admin@example.com
        name:
          type: string
          example: 'Bar Tender'
        password:
          type: string
          format: password
          minLength: 5
          example: password
      type: object
    ServerVersion:
      required:
        - version
        - type
        - search_host
        - search_version
        - latest_version
        - is_latest
        - is_feeds_enabled
        - is_password_login_enabled
      properties:
        version:
          description: 'Version of the server'
          type: string
          example: 1.0.0
        latest_version:
          description: 'Latest version available on GitHub'
          type: string
          example: 3.1.0
        is_latest:
          description: 'Whether the server is running the latest version'
          type: boolean
          example: true
        type:
          description: 'Environment the server is running in'
          type: string
          example: production
        search_host:
          type: string
          example: 'https://search.example.com'
        search_version:
          description: 'Version of the search engine'
          type: string
          example: 1.2.0
        is_feeds_enabled:
          description: 'Whether feeds are enabled'
          type: boolean
          example: true
        is_password_login_enabled:
          description: 'Whether password login is enabled'
          type: boolean
          example: true
      type: object
    ShoppingListRequest:
      required:
        - ingredients
      properties:
        ingredients:
          type: array
          items:
            properties:
              id:
                type: integer
              quantity:
                type: integer
            type: object
      type: object
    TagRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Floral
      type: object
    UserRequest:
      required:
        - role_id
        - email
        - name
        - password
      properties:
        role_id:
          type: integer
          example: 1
        email:
          type: string
          example: admin@example.com
        name:
          type: string
          example: 'Bar Tender'
        password:
          type: string
          format: password
          example: password
      type: object
    UtensilRequest:
      required:
        - name
      properties:
        name:
          type: string
          example: Shaker
        description:
          type:
            - string
            - 'null'
          example: 'Used to shake ingredients'
      type: object
    ValidationError:
      required:
        - errors
        - message
      properties:
        message:
          type: string
          example: 'The cocktail name must be a string. (and 2 more errors)'
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
      type: object
    OauthProvider:
      description: 'Provides a list of supported SSO providers.'
      type: string
      enum:
        - github
        - google
        - gitlab
        - authentik
        - authelia
        - keycloak
        - pocketid
        - zitadel
  securitySchemes:
    user_token:
      type: http
      scheme: bearer
security:
  -
    user_token: []
tags:
  -
    name: Authentication
    description: Authentication
  -
    name: Bars
    description: Bars
  -
    name: Calculator
    description: Calculator
  -
    name: Cocktails
    description: Cocktails
  -
    name: 'Cocktail method'
    description: 'Cocktail method'
  -
    name: Collections
    description: Collections
  -
    name: Explore
    description: Explore
  -
    name: Exports
    description: Exports
  -
    name: Feeds
    description: Feeds
  -
    name: Glasses
    description: Glasses
  -
    name: Images
    description: Images
  -
    name: Import
    description: Import
  -
    name: Ingredients
    description: Ingredients
  -
    name: Menu
    description: Menu
  -
    name: Notes
    description: Notes
  -
    name: Tokens
    description: Tokens
  -
    name: 'Price category'
    description: 'Price category'
  -
    name: Profile
    description: Profile
  -
    name: Public
    description: Public
  -
    name: Ratings
    description: Ratings
  -
    name: Recommender
    description: Recommender
  -
    name: Server
    description: Server
  -
    name: 'Users: Shelf'
    description: 'Users: Shelf'
  -
    name: 'Bars: Shelf'
    description: 'Bars: Shelf'
  -
    name: 'Users: Shopping list'
    description: 'Users: Shopping list'
  -
    name: Billing
    description: Billing
  -
    name: Tag
    description: Tag
  -
    name: Users
    description: Users
  -
    name: Utensils
    description: Utensils
